arc_control.f90:       CALL heapsort(tgapv,ngap,indgsrt)
arc_control.f90:       CALL check_cons_arcs(obs,obsw,m,nat,natc,fail_check)
arc_control.f90:      CALL attri_comp(mm, obs(m1:m2), obsw(m1:m2), att, error)
arc_control.f90:      CALL test_curv(att, geoc_chi, acce_chi, chi, sign_curv, bad_fit)
arc_control.f90:    CALL attri_comp(m, obs, obsw, att, error) !WARNING: rejected obs???
arc_control.f90:    CALL test_curv(att,geoc_chi,acce_chi,chi,sign_curv,bad_fit)
arc_control.f90:          CALL split_by_gap(obs(1:m)%time_tdt, m, gap, mgap, tgap)
att_prelim2.f90:  CALL admis_reg(name0,iunmat,attr%tdtobs,attr%angles,attr%obscod,  &
att_prelim2.f90:  CALL attelements(attr,rr,rdot,elk,uncatt)
close_app.f90:! first call to falsi                                                   
close_app.f90:          IF(min_dist) CALL falsi(tcur,xa,va,nv,xpla,jc,first,iplam) 
close_app.f90:          CALL stepcon(x,v,npoint,dmin(idc),dir,dt) 
close_app.f90:          CALL stepcon(x,v,npoint,dmin(idc),dir,dt) 
close_app.f90:      CALL prvec(x,v,cgeo) 
close_app.f90:      CALL lincom(x,1.d0,v,dt,x1) 
close_app.f90:! variables for call to dmintil_rms                                  
close_app.f90:!         CALL compute_minima_ta(x6,xpla,iplam,cmin,cplmin,d2,nummin)
close_app.f90:         CALL dmintil_rms(el1,el2,nummin,dmintil,c1min,c2min)
close_app.f90:      CALL strclo(iplam,t,xpla,xa,va,nv,jc,r2,rdot2,         &
close_app.f90:      CALL strclo(iplam,t,xpla,xa,va,nv,jc,r2,rdot2,         &
close_app.f90:         CALL rkg(t,xa,va,nv,hh,xat,vat,xplat) 
close_app.f90:            CALL strclo(iplam,tt,xplat,xat,vat,nv,jc,r0,rdot0,&
close_app.f90:      CALL strclo(iplam,t0,xplat,xat,vat,nv,jc,r0,rdot0,     &
close_app.f90:    call prvec(xt,vt,ang)
close_app.f90:    call prvec(vt,ang,vlenz)                    ! Lenz vector
close_app.f90:    CALL solve_peri(r0,sig0,peri,gm(iplam),alpha,psi,dt,conv_contr)
close_app.f90:       CALL fser_propag(xt,vt,0.d0,dt,gm(iplam),xat(1:3),vat(1:3))
close_app.f90:       CALL vawrxv(xt,vt,dxdx0(:,1:nd),nv,nd)
close_app.f90:       CALL fser_propag_der(xt,vt,0.d0,dt,gm(iplam),xat(1:3),vat(1:3),dxvdxtvt)
close_app.f90:       CALL varunw(dxvdx0,xat,vat,6,nv)
close_app.f90:       call prvec(xat,vat,ang)
close_app.f90:       call prvec(vat,ang,vlenz)                    ! Lenz vector
close_app.f90:    CALL earcar(t0+dt,xpla,1)
close_app.f90:      CALL tp_fser(nv,tcur,x,v,iplam,xpla2,xat,vat,dt)
close_app.f90:  call mjddat(tcur2,iday,imonth,iyear,hour) 
count_opp.f90:  CALL heapsort(obs(1:m)%time_tdt,m,time_ord)
count_opp.f90:  CALL pro_ele(el,tt(1),el1)
count_opp.f90:  CALL set_restart(.true.) 
count_opp.f90:  CALL predic_obs(el1,500,tt(1),'O',alpha,delta,hmagn,inl,      &
count_opp.f90:  CALL set_restart(.false.) 
count_opp.f90:     CALL predic_obs(el1,500,tt(j+1),'O',alpha,delta,hmagn,inl,          &
count_opp.f90:     CALL set_restart(.false.)
count_opp2.f90:  CALL heapsort(obs(1:m)%time_tdt,m,time_ord)
count_opp2.f90:  CALL pro_ele(el,tt(1),el1)
count_opp2.f90:  CALL set_restart(.true.) 
count_opp2.f90:  CALL predic_obs(el1,500,tt(1),'O',alpha,delta,hmagn,inl,      &
count_opp2.f90:  CALL set_restart(.false.) 
count_opp2.f90:     CALL predic_obs(el1,500,tt(j+1),'O',alpha,delta,hmagn,inl,          &
count_opp2.f90:     CALL set_restart(.false.)
critical_points.f90:   CALL earcar(elea%t,elea%coord,1)
critical_points.f90:      CALL undefined_orb_uncert(6,uncea)
critical_points.f90:      CALL dmintil_rms(elea,elem,nummin,dmintil,UNC1=uncea,UNC2=uncel,&
critical_points.f90:      CALL Habs_rms(elea,elem,uncel,Hrms,dHdel2)
critical_points.f90:      CALL dmintil_rms(elea,elem,nummin,dmintil)
critical_points.f90:    CALL coo_cha(el2,'ATT',elatt2,fail_flag,dattdel2) ! to compute rho
critical_points.f90:    CALL coo_cha(el2,'CAR',elcar2,fail_flag,dcardel2) ! to compute r
critical_points.f90:    CALL coo_cha(el1,'CAR',elcar1,fail_flag) ! used only for beta (phase)
critical_points.f90:    CALL orbitcoe(alpha,beta,elc1,elc2)
critical_points.f90:    CALL matrixdat(alpha,beta)
critical_points.f90:    CALL compmodsylv16(cp0,cp1,cp2,cq0,cq1,cq2,cq3,cq4,cr31,cr32,cr33, &
critical_points.f90:    CALL cdetcomp(S10,detS10)
critical_points.f90:    CALL rvfft(evp0,Nev,expo) 
critical_points.f90:    CALL rvfft(evp1,Nev,expo) 
critical_points.f90:    CALL rvfft(evp2,Nev,expo) 
critical_points.f90:    CALL rvfft(evq0,Nev,expo) 
critical_points.f90:    CALL rvfft(evq1,Nev,expo) 
critical_points.f90:    CALL rvfft(evq3,Nev,expo) 
critical_points.f90:    CALL rvfft(evq4,Nev,expo) 
critical_points.f90:    CALL rvfft(evr31,Nev,expo) 
critical_points.f90:    CALL rvfft(evr32,Nev,expo)
critical_points.f90:    CALL rvfft(evr33,Nev,expo)
critical_points.f90:    CALL rvfft(evr34,Nev,expo)
critical_points.f90:    CALL rvfft(evr35,Nev,expo) ! is constant: avoid evaluation
critical_points.f90:    CALL rvfft(evr36,Nev,expo) ! is constant: avoid evaluation
critical_points.f90:    CALL rvfft(evr41,Nev,expo) 
critical_points.f90:    CALL rvfft(evr45,Nev,expo) ! is constant: avoid evaluation
critical_points.f90:    CALL rvfft(evr46,Nev,expo) ! is constant: avoid evaluation
critical_points.f90:    CALL rvfft(puroot,Nev,expo) 
critical_points.f90:       CALL compmodsylv16(complp0(j),complp1(j),complp2(j), &
critical_points.f90:       CALL cdetcomp(evalSYLVj,detevalSYLV)
critical_points.f90:    CALL code_input(Nev,evpol15,evalpoly) 
critical_points.f90:    CALL irvfft(evalpoly,Nev,expo) 
critical_points.f90:    CALL rvfft(testevalpoly,Nev,expo) 
critical_points.f90:    CALL solvpoly(poldeg,polycoe1(1:poldeg+1),wzero,nsol,hzflag, &
critical_points.f90:    CALL solvesystem(alpha,beta,nsol,wzero(1:nsol), &
critical_points.f90:          CALL CP_newton_raphson(elc1(1:5),elc2(1:5),fpl(nr),fcom(nr))
critical_points.f90:       CALL hessian(fpl(nr),fcom(nr),ans) 
critical_points.f90:!       CALL hess_ta_new(fpl(nr),fcom(nr),ans) 
critical_points.f90:          CALL int_eval(radius(nr),fpl(nr),fcom(nr),ans)
critical_points.f90:    CALL d2eval(Vpl,vcom,vD2) 
critical_points.f90:       CALL d2eval(fpl,fcom,fD2) 
critical_points.f90:  CALL prvec(tau1,tau2,tau3)
critical_points.f90:  CALL coo_cha(el1,'COT',com1,fail_flag)
critical_points.f90:  CALL coo_cha(el2,'COT',com2,fail_flag)
critical_points.f90:  CALL prvec(Enne1,Enne2,Anod)
critical_points.f90:  CALL prvec(Enne1,Anodver,Enne1Anodver)
critical_points.f90:  CALL prvec(Anodver,chi1,Anodverchi1)
critical_points.f90:  CALL prvec(Anodver,chi2,Anodverchi2)
critical_points.f90:    CALL prvec(dEnne1di1,Anodver,ii1)
critical_points.f90:    CALL prvec(Enne1,dAnodverdi1,iii1)
critical_points.f90:    CALL prvec(Enne1,dAnodverdi2,dEnne1Anodverdi2)
critical_points.f90:    CALL prvec(dEnne1dbigom1,Anodver,bo1)
critical_points.f90:    CALL prvec(Enne1,dAnodverdbigom1,boo1)
critical_points.f90:    CALL prvec(Enne1,dAnodverdbigom2,dEnne1Anodverdbigom2)
critical_points.f90:     CALL coo_cha(el1,'COT',com1,fail_flag,jaccomel1)
critical_points.f90:     CALL coo_cha(el2,'COT',com2,fail_flag,jaccomel2)
critical_points.f90:     CALL convertunc(unc1,jaccomel1,unccom1)
critical_points.f90:     CALL convertunc(unc2,jaccomel2,unccom2)
critical_points.f90:        CALL coo_cha(el2,'COT',com2,fail_flag)
critical_points.f90:        CALL coo_cha(el1,'COT',com1,fail_flag)
critical_points.f90:  CALL crit_pts(com1%coord(1:5),com2%coord(1:5), &
critical_points.f90:     CALL d2eval(f1(j),f2(j),DD2)
critical_points.f90:  CALL heapsort(D2,nstat,srtnum)
critical_points.f90:!       CALL comp_rms_com(com1,com2,unccom1,unccom2,chk_der,f1min(i),f2min(i),&
critical_points.f90:        CALL comp_rms_com(com1,com2,unccom1,unccom2,chk_der_aux, &
critical_points.f90:        CALL check_rms(sinmutI_aux,sinmutIrms_aux,detH_aux,detHrms_aux, &
critical_points.f90:        CALL sign_dmin(car1min(i)%coord(1:3),tau1, &
critical_points.f90:        CALL coo_cha(com1min,'CAR',car1min(i),fail_flag,dcardcom1)
critical_points.f90:        CALL coo_cha(com2min,'CAR',car2min(i),fail_flag,dcardcom2)       
critical_points.f90:        CALL tau1_tau2(com1,com2,f1min(i),f2min(i),car1min(i),car2min(i),&
critical_points.f90:!        CALL comp_rms_com(com1,com2,unccom1,unccom2,chk_der_aux, &
critical_points.f90:        CALL sign_dmin(car1min(i)%coord(1:3),tau1, &
critical_points.f90:        CALL tau1_tau2(com1,com2,f1min(i),f2min(i),car1min(i),car2min(i),&
critical_points.f90:        CALL sign_dmin(car1min(i)%coord(1:3),tau1, &
critical_points.f90:        CALL derdmintest(com1,com2,nstat,nummin,f1min,f2min, &
critical_points.f90:!  CALL pdtime(q1,r1,mu1,alpha1,psi1_ini,psi1,dt1,1.d-10)
critical_points.f90:!  CALL pdtime(q2,r2,mu2,alpha2,psi2_ini,psi2,dt2,1.d-10)
critical_points.f90:  CALL coo_cha(com1min,'CAR',car1min,fail_flag,dcardcom1)
critical_points.f90:  CALL coo_cha(com2min,'CAR',car2min,fail_flag,dcardcom2)       
critical_points.f90:  CALL prvec(tau1,tau2,tau3)
critical_points.f90:  CALL prvec(tau1vers,tau2vers,tau3vec)  ! tau3vec has the same direction
critical_points.f90:  CALL prvec(dtau1versdq1,tau2vers,dtau3vecdq1)
critical_points.f90:  CALL prvec(dtau1versde1,tau2vers,dtau3vecde1)
critical_points.f90:  CALL prvec(dtau1versdi1,tau2vers,dtau3vecdi1)
critical_points.f90:  CALL prvec(dtau1versdOm1,tau2vers,dtau3vecdOm1)
critical_points.f90:  CALL prvec(dtau1versdomeg1,tau2vers,dtau3vecdomeg1)
critical_points.f90:  CALL prvec(dtau1versdf1,tau2vers,dtau3vecdf1)
critical_points.f90:  CALL prvec(tau1vers,dtau2versdq2,dtau3vecdq2)
critical_points.f90:  CALL prvec(tau1vers,dtau2versde2,dtau3vecde2)
critical_points.f90:  CALL prvec(tau1vers,dtau2versdi2,dtau3vecdi2)
critical_points.f90:  CALL prvec(tau1vers,dtau2versdOm2,dtau3vecdOm2)
critical_points.f90:  CALL prvec(tau1vers,dtau2versdomeg2,dtau3vecdomeg2)
critical_points.f90:  CALL prvec(tau1vers,dtau2versdf2,dtau3vecdf2)
critical_points.f90:!  CALL pdtime(q1,r1,mu1,alpha1,psi1_ini,psi1,dt1,1.d-10)
critical_points.f90:!  CALL pdtime(q2,r2,mu2,alpha2,psi2_ini,psi2,dt2,1.d-10)
critical_points.f90:  CALL coo_cha(com1min,'CAR',car1min,fail_flag)
critical_points.f90:  CALL coo_cha(com2min,'CAR',car2min,fail_flag)       
critical_points.f90:  CALL prvec(tau1,tau2,tau3)
critical_points.f90:  CALL prvec(tau1vers,tau2vers,tau3vec)  ! tau3vec has the same direction
critical_points.f90:    CALL sin_mutI(com1%coord(1:5),com2var%coord(1:5),sinmutIvar)
critical_points.f90:    CALL crit_pts(com1%coord(1:5),com2var%coord(1:5),f1var,f2var,nstatvar, &
critical_points.f90:       CALL d2eval(f1var(j),f2var(j),DD2var)
critical_points.f90:    CALL heapsort(D2var,nstatvar,srtnumvar)
critical_points.f90:       CALL det_H(com1,com2var,f1minvar(i),f2minvar(i), &
critical_points.f90:       CALL tau1_tau2(com1,com2var,f1minvar(i),f2minvar(i),car1min,car2min,&
detcomp.f90:    CALL ZGETF2( M, N, A, LDA, IPIV, INFO ) 
detcomp.f90:       CALL XERBLA( 'ZGETF2', -INFO ) 
detcomp.f90:               &         CALL ZSWAP( N, A( J, 1 ), LDA, A( JP, 1 ), LDA )         
detcomp.f90:               &         CALL ZSCAL( M-J, ONE / A( J, J ), A( J+1, J ), 1 )       
detcomp.f90:          CALL ZGERU( M-J, N-J, -ONE, A( J+1, J ), 1, A( J, J+1 ),    &
detcomp.f90:         CALL XERBLA( 'ZGERU ', INFO ) 
detcomp.f90:!  call system-specific exception-handling facilities.                  
dnod_amoid_rms_com.f90:   CALL coo_cha(el1,'COM',com1,fail_flag,jaccomel1)
dnod_amoid_rms_com.f90:   CALL coo_cha(el2,'COM',com2,fail_flag,jaccomel2)
dnod_amoid_rms_com.f90:!       CALL dnod_amoid(el1,el2var,dnodpvar,dnodmvar,amoidpvar,amoidmvar)
dnod_amoid_rms_com.f90:   CALL mutual_ref(com1,com2,mutI,mutom1,mutom2, &
dnod_amoid_rms_com.f90:    CALL prvec(tau1p,tau2p,tau3p)
dnod_amoid_rms_com.f90:     CALL sign_dmin(xyz1p,tau1p,xyz2p,tau2p,dsignp)
dnod_amoid_rms_com.f90:    CALL prvec(tau1m,tau2m,tau3m)
dnod_amoid_rms_com.f90:     CALL sign_dmin(xyz1m,tau1m,xyz2m,tau2m,dsignm)
dyn_param.f90:   CALL rmsp(debnac,le)
ephem_prop.f90:  CALL chereq(icov,ini0,cov0,el0%t,iun20,ok) 
ephem_prop.f90:  CALL chetim(el0%t,tr,ok) 
ephem_prop.f90:     CALL pro_ele(el0,tr,el1) 
ephem_prop.f90:     CALL pro_ele(el0,tr,el1,unc0,unc1) 
ephem_prop.f90:        CALL outco(iun8,unc1%g,unc1%c) 
ephem_prop.f90:  call chetim(tr,tf,ok) 
ephem_prop.f90:     call filnam(dir,name,'ele',file,ln) 
ephem_prop.f90:     call filopn(unit,file(1:ln),'unknown') 
ephem_prop.f90:     call wro1lh(unit,'ECLM','J2000',cooy) 
ephem_prop.f90:     call filnam(dir,name,'moid',filem,lnm) 
ephem_prop.f90:     call filopn(munit,filem(1:lnm),'unknown') 
ephem_prop.f90:  call rmsp(name,lnnam) 
ephem_prop.f90:  CALL coo_cha(el0,'CAR',elem0,fail_flag)
ephem_prop.f90:  CALL set_restart(.true.)
ephem_prop.f90:     CALL pro_ele(elem0,tr,elem1)
ephem_prop.f90:     CALL set_restart(.true.)
ephem_prop.f90:        CALL pro_ele(elem1,t2,elem2)
ephem_prop.f90:        CALL set_restart(.false.)
ephem_prop.f90:              CALL nomoid(t2,elem2,moid,dnp,dnm) 
ephem_prop.f90:        CALL pro_ele(elem1,t2,elem2)
ephem_prop.f90:        CALL set_restart(.false.) 
ephem_prop.f90:              CALL nomoid(t2,elem2,moid,dnp,dnm) 
ephem_prop.f90:     CALL set_restart(.true.) 
ephem_prop.f90:           CALL coo_cha(elsav(i),cooy,elem1,fail_flag)
ephem_prop.f90:           CALL write_elems(elem1,name(1:lnnam),'1L',file,unit)
ephem_prop.f90:  IF(ephefl) call filclo(unit,' ') 
ephem_prop.f90:  IF(moidfl) call filclo(munit,' ') 
ephem_prop.f90:  CALL srtept(teph,neph,el0%t,srtord) 
ephem_prop.f90:  CALL spflds(fields,field,nf,nfx) 
ephem_prop.f90:        CALL sv2int('ephem.appmot.','format',cval,iepfor,.false.,     &
ephem_prop.f90:        CALL rdncha('ephem.appmot.','units',amuni,.false.,            &
ephem_prop.f90:        CALL angvcf(amuni,cvf,fail) 
ephem_prop.f90:           CALL angvcf(amuni,cvf,fail) 
ephem_prop.f90:        CALL filstr('App. motion',cval,lf1+lf2,inb1,0) 
ephem_prop.f90:           CALL filstr('RA*cosDE',cval,lf1,inb1,0) 
ephem_prop.f90:           CALL filstr('Vel',cval,lf1,inb1,0) 
ephem_prop.f90:        CALL filstr(amuni,cval,lf1,inb1,0) 
ephem_prop.f90:           CALL filstr('DEC',cval,lf2,inb1,0) 
ephem_prop.f90:           CALL filstr(amuni,cval,lf2,inb1,0) 
ephem_prop.f90:           CALL filstr('PA',cval,lf2,inb2,0) 
ephem_prop.f90:           CALL filstr('deg',cval,lf2,inb2,0) 
ephem_prop.f90:  CALL set_restart(.true.) 
ephem_prop.f90:        CALL predic_obs(el0,idsta,tdt,obstyp,      &
ephem_prop.f90:        CALL predic_obs(el0,idsta,tdt,obstyp,  &
ephem_prop.f90:     CALL set_restart(.false.) 
ephem_prop.f90:     CALL cnvtim(mjdt,sect,'TDT',mjdout,secout,scale) 
ephem_prop.f90:          CALL mjddat(tout,day,month,year,hour) 
ephem_prop.f90:          CALL sessag(alpha*hrad,siga,ia,ma,sa) 
ephem_prop.f90:          CALL sessag(delta*degrad,sigd,id,md,sd) 
ephem_prop.f90:! CALL set_restart(.true.) 
ephem_prop.f90:  call rs(6,6,gamma,eigval,1,eigvec,fv1,fv2,ierr) 
eval_risk.f90:  CALL dqags(ff_prob,rmin,rmax,epsabs,epsrel,rm,abserr,neval,ier,limit   &
eval_risk.f90:  call dqagsc(f_prob,fstext,sndext,epsabs,epsrel,result,abserr,neval,ier,&
fitsubs.f90:  call cnvtim(mjd,sec,scale,mjdtdt,sectdt,'TDT') 
fitsubs.f90:  call cnvtim(mjd,sec,scale,mjdtdt,sectdt,'TDT') 
fitsubs.f90:     CALL cnvtim(mjd1,sec1,'UTC',mjd2,sec2,'TDT') 
fitsubs.f90:2    CALL menu(iob1,menunam,5,'Observation type?=',                 &
fitsubs.f90:     CALL statcode(ids_aux,ids)
force9d.f90:        CALL sec_nong9(xb,vb,s,sv,secacc)
force_model.f90:          call filopn(iabe,filbec,'old') 
force_model.f90:203       call filclo(iabe,' ')
force_model.f90:    CALL planast(t0,ips,imem,velo_req,xpla) 
force_model.f90:      call genrel(x,v,drgr) 
force_model.f90:      call eihrel2(x,v,xpla,d,r,rast,frel)!,t0) 
force_model.f90:      call j2sun(x,frel) 
force_model.f90:   CALL radpast(x(1:3),accrad)
force_model.f90:      call yarkdi(x(1:3),yarkv,iyarpt)
force_model.f90:         call yarkse(x(1:3),v(1:3),yarkvs,iyarpt) 
force_model.f90:      CALL secular_nongrav(x(1:3),v(1:3),secacc)
force_model.f90:      CALL comet_non_grav_symm(x,v,nongrav) ! Call to symmetric model
force_model.f90:      CALL comet_non_grav_asymm(x,v,nongrav) ! Call to asymmetric model
force_model.f90:            CALL rotsys('ECLM',mj2000,s2000,'BF  ',mjd1,sec1,rot,rot1,rot2,1)
force_model.f90:            CALL parm10(y,2,army,partials)
force_model.f90:         CALL prodmv(dfd(1:3,kk),derf,x(21+3*(kk-1)+1:21+3*kk))
force_model.f90:         CALL prodmv(dfd(1:3,kk),derf,x(21+3*(kk-1)+1:21+3*kk))
force_model.f90:        call state(et0,listpl,pv,pnut,istate)                          
force_model.f90:           CALL rdbep(t0,iatrue,astid,xast,vast)                       
force_model.f90:     CALL masjpl
force_model.f90:  CALL rmsp(nam1,ln) 
force_model.f90:  CALL selpert(nam0,found0) 
force_model.f90:  CALL selpert(namp,foundp) 
gaussdeg8.f90:     CALL eamoon_mass
gaussdeg8.f90:           CALL earcar(tobs(i),xea,1)
gaussdeg8.f90:           CALL observer_position(tobs(i),xt(1:3,i),vt(1:3,i),OBSCODE=obscod(i)) 
gaussdeg8.f90:           CALL prodmv(xt(1:3,i),roteceq,xt(1:3,i))
gaussdeg8.f90:           CALL observer_position(tobs(i),xt(1:3,i),vt(1:3,i),OBSCODE=obscod(i)) 
gaussdeg8.f90:  CALL matin(sinv0,det,3,0,3,ising,1) 
gaussdeg8.f90:  CALL prodmv(ra,xt,a) 
gaussdeg8.f90:  CALL prodmv(rb,xt,b) 
gaussdeg8.f90:  CALL prvec(xt(1:3,2),esse0(1:3,2),vvv)
gaussdeg8.f90:  CALL solv8(coef,roots,nroots) 
gaussdeg8.f90:     CALL prodmv(gcap,xt,c) 
gaussdeg8.f90:     CALL prodmv(crhom,sinv0,gcap) 
gaussdeg8.f90:     CALL gibbs(xp,tau1,tau3,vp,rootgm) 
gaussdeg8.f90:        CALL prodmv(xv(1:3),roteqec,xp(1:3,2))
gaussdeg8.f90:        CALL prodmv(xv(4:6),roteqec,vp)
gaussdeg8.f90:        CALL coo_cha(el(nsol),'KEP',elk,fail_flag)
laplace_poincare.f90:! to call attri_comp
laplace_poincare.f90:  CALL attri_comp(m,obs,obsw,att,error,qobs,qpobs,qppobs)
laplace_poincare.f90:  CALL prvec(rhat,vhat,nhat)
laplace_poincare.f90:  CALL earcar(tc,qea,1)
laplace_poincare.f90:  CALL solv8(coef,roots,nroots) 
laplace_poincare.f90:     CALL coo_cha(el(nsol),'KEP',elk,fail_flag)
least_squares.f90:  CALL cheobs(obs0,ini0,ok) 
least_squares.f90:  CALL chetim(obs(1)%time_tdt,obs(m)%time_tdt,ok) 
least_squares.f90:     CALL whicor(interactive,nd,icor,ncor,inew) 
least_squares.f90:     CALL whicor(interactive,nd,icor,ncor,inew) 
least_squares.f90:  CALL diff_cor(m,obs,obsw,el0,icor,iunf,elc,uncert,csino0,delno0,succ,nd)
least_squares.f90:     CALL mag_est(m,obs,obsw,elc%h_mag,rmsh) 
least_squares.f90:!        CALL tra_res_out(iuntra,m,obs,s2n,iunres,obsw)
least_squares.f90:        CALL write_rwo(rwofi0,obs,obsw,m,error_model_priv,csino0,rmsh)
least_squares.f90:        CALL outcov(iun_covar,nd,icor,uncert%g,uncert%c) 
least_squares.f90:  CALL blockset(m,obs,obsw)
least_squares.f90:  CALL sort_obs(el0%t,obs,obsw,m,iposs,obs_s,obsw_s)                         
least_squares.f90:     CALL set_restart(.true.) 
least_squares.f90:           CALL alph_del(elc,tauj,iocj,pos,vel,ider,twobo,nd,alj,dej,dade,ddde, &
least_squares.f90:           CALL r_rdot(elc,tauj,iocj,obs_s(j)%tech,vel,pos,alj,dej,nd,drde,dvde,ider) 
least_squares.f90:        CALL set_restart(.false.) 
least_squares.f90:     call min_sol(obs_s,obsw_s,m,gr,icor,iun,uncert4%c,deq,uncert4%g,   &
least_squares.f90:  CALL min_sol(obs_s,obsw_s,m,g,icor6,iun,uncert%c,deqv,uncert%g,csinor,indp,cond,nd)
least_squares.f90:  CALL unsort_obs(iposs,m,obsw_s,obsw)
least_squares.f90:  CALL mag_est(m,obs,obsw,elc%h_mag,rmsh)
least_squares.f90:  CALL blockset(m,obs,obsw)
least_squares.f90:  CALL sort_obs(el0%t,obs,obsw,m,iposs,obs_s,obsw_s)                         
least_squares.f90:     CALL set_restart(.true.) 
least_squares.f90:           CALL alph_del(elc,tauj,iocj,pos,vel,ider,twobo,nd,alj,dej,dade,ddde, &
least_squares.f90:           CALL r_rdot(elc,tauj,iocj,obs_s(j)%tech,vel,pos,alj,dej,nd,drde,dvde,ider) 
least_squares.f90:        CALL set_restart(.false.) 
least_squares.f90:     CALL min_sol(obs_s,obsw_s,m,g,icor6,iun,                         &
least_squares.f90:     CALL weak_dir(uncert%g,peq,sdir,-1,elc%coo,elc%coord,units,nd)
least_squares.f90:     CALL graha_1(peq,6,v) 
least_squares.f90:     call min_sol(obs_s,obsw_s,m,gr,icor,iun,c,deqv,gam,csinor,indp,cond,nd)
least_squares.f90:  CALL unsort_obs(iposs,m,obsw_s,obsw)
least_squares.f90:  CALL mag_est(m,obs,obsw,elc%h_mag,rmsh)
least_squares.f90:  CALL blockset(m,obs,obsw)
least_squares.f90:  CALL sort_obs(el0%t,obs,obsw,m,iposs,obs_s,obsw_s)                         
least_squares.f90:     CALL set_restart(.true.) 
least_squares.f90:           CALL alph_del(elc,tauj,iocj,pos,vel,ider,twobo,nd,alj,dej,dade,ddde, &
least_squares.f90:           CALL r_rdot(elc,tauj,iocj,obs_s(j)%tech,vel,pos,alj,dej,nd,drde,dvde,ider) 
least_squares.f90:        CALL set_restart(.false.) 
least_squares.f90:     CALL min_sol(obs_s,obsw_s,m,g,icor6,iun,                         &
least_squares.f90:     CALL weak_dir(uncert%g(1:nd,1:nd),peq,sdir,-1,elc%coo,elc%coord,units,nd)
least_squares.f90:     CALL graha_1(peq,nd,v(1:nd,1:nd)) 
least_squares.f90:     call min_sol(obs_s,obsw_s,m,gr,icor,iun,c(1:nd,1:nd),deqv,gam(1:nd,1:nd),csinor,indp,cond,nd)
least_squares.f90:  CALL unsort_obs(iposs,m,obsw_s,obsw)
least_squares.f90:  CALL mag_est(m,obs,obsw,elc%h_mag,rmsh)
least_squares.f90:  CALL blockset(m,obs,obsw)
least_squares.f90:  CALL sort_obs(el0%t,obs,obsw,m,iposs,obs_s,obsw_s)  
least_squares.f90:        CALL sin_cor(m,obs_s,obsw_s,elc,icor,iun,matonly,delnor,csinor,uncert,nd)     
least_squares.f90:           CALL unsort_obs(iposs,m,obsw_s,obsw)
least_squares.f90:     IF(autrej) CALL sin_cor(m,obs_s,obsw_s,elc,icor,iun,matonly,delnor,csinor,uncert,nd) 
least_squares.f90:! call with -iun to avoid logging rejection stats                       
least_squares.f90:        CALL reject_obs(iunf,csinor,obs_s,obsw_s,m,uncert%g(1:nd,1:nd),icor,nmod,nd)
least_squares.f90:        CALL sin_cor(m,obs_s,obsw_s,elc,icor,iun,matonly,delnor,csinor,uncert,nd) 
least_squares.f90:  CALL unsort_obs(iposs,m,obsw_s,obsw)
least_squares.f90:  CALL set_restart(.true.) 
least_squares.f90:        CALL alph_del(elc,tauj,iocj,pos,vel,ider,twobo,nd,alj,dej,dade,ddde, &
least_squares.f90:        CALL r_rdot(elc,tauj,iocj,tech,vel,pos,alj,dej,nd,drde,dvde,ider)
least_squares.f90:     CALL set_restart(.false.) 
least_squares.f90:  CALL set_restart(.true.) 
least_squares.f90:  CALL min_sol(obs_s,obsw_s,m,g(:,1:nd),icor,iun,gtwg(1:nd,1:nd),deq(1:nd),gamma(1:nd,1:nd),csinor,indp,cond,nd)
least_squares.f90:!        CALL weak_dir(gamma,peq,sdir,iun,elc%coo,elc%coord)
least_squares.f90:     CALL blockdef(obs,m)
least_squares.f90:           CALL blocomp(m,obs,obsw,stablk(ibk),indblk(1,ibk),  &
least_squares.f90:           CALL blocomp(m,obs,obsw,stablk(ibk),indblk(1,ibk),  &
least_squares.f90:         CALL fit_weight(obs(j),obsw(j),.false.,wj)
least_squares.f90:            CALL fit_weight(obs(j),obsw(j),.false.,wk)
least_squares.f90:               CALL obscor(error_model_priv,obs(j),wj,obs(k),wk,cova,covd)
least_squares.f90:      CALL invmat(wblock,nxxbl,2*noinblock,cov,cond,indp,ierrou)
least_squares.f90:      CALL heapsort(toss,noss,iposs) 
least_squares.f90:                 CALL fit_weight(obs_s(i),obsw_s(i),.true.,w)
least_squares.f90:        CALL fit_weight(obs_s(i),obsw_s(i),.true.,w)
least_squares.f90:     CALL invmat(gamma,nd,nd,gtwg,cond,indp,iunf) 
least_squares.f90:        CALL qr_inv(gtwg,gamma,nd,izer,det,aval(1:nd))
least_squares.f90:  CALL invmat(gr,ndimx,ndc,cr,cond,indp,iunf) 
least_squares.f90:     CALL qr_inv(cr(1:ndc,1:ndc),gr(1:ndc,1:ndc),ndc,izer,det,aval(1:ndc))
least_squares.f90:  CALL tchol(c,nx,ndim,indp,err) 
least_squares.f90:     CALL inver(c,v,nx,ndim)                                         
least_squares.f90:     CALL fit_weight(obs(i),obsw(i),.true.,w)      
least_squares.f90:     CALL fit_weight(obs_s(iob),obsw_s(iob),.false.,w)
least_squares.f90:        CALL inv22(covres,wres,det) 
least_squares.f90:           call mjddat(mjd(iob),iday,imonth,iyear,hour) 
least_squares.f90:           call mjddat(mjd(iob),iday,imonth,iyear,hour) 
least_squares.f90:           call mjddat(mjd(iob),iday,imonth,iyear,hour) 
least_squares.f90:  CALL rdnlog('reject.','auto',autrej,.false.,found,                &
least_squares.f90:  CALL rdnlog('reject.','rejopp',rejopp,.false.,found,              &
least_squares.f90:  CALL rdnlog('reject.','rej_fudge',rej_fudge,.false.,found,  &
least_squares.f90:  CALL rdnrea('reject.','chi2_reject',x2rej,.false.,found,          &
least_squares.f90:  CALL rdnrea('reject.','chi2_recover',x2rec,.false.,found,         &
least_squares.f90:  CALL rdnrea('reject.','chi2_frac',x2frac,.false.,found,           &
least_squares.f90:  CALL rdnrea('reject.','conv_cntr',delrej,.false.,found,           &
least_squares.f90:  CALL rdnint('reject.','nit_max',itmaxr,.false.,found,             &
least_squares.f90:  CALL rdnrea('reject.','max_perc',fomax,.false.,found,             &
least_squares.f90:  CALL rdnrea('reject.','chi2_mag_rej',x2mrej,.false.,found,        &
least_squares.f90:  CALL rdnrea('reject.','chi2_mag_rec',x2mrec,.false.,found,        &
least_squares.f90:  CALL rdnint('difcor.','nit_max',itmax,.false.,found,fail1,fail)
least_squares.f90:  CALL rdnint('difcor.','nitg_max',itgmax,.false.,found,fail1,fail)
least_squares.f90:  CALL rdnrea('difcor.','div_cntr',divrat,.false.,found,fail1,fail)
least_squares.f90:  CALL rdnrea('difcor.','conv_contr',delcr,.false.,found,fail1,fail)
least_squares.f90:  CALL rdnrea('difcor.','del_constr',del_constr,.false.,found,fail1,fail)
least_squares.f90:  CALL rdnrea('difcor.','step_sig',step_sig,.false.,found,fail1,fail)
least_squares.f90:  CALL rdnlog('difcor.','scaling_lov',scaling_lov,.false.,found,fail1,fail)
least_squares.f90:  CALL rdnlog('difcor.','second_lov',second_lov,.false.,found,fail1,fail)
least_squares.f90:     CALL ecc_peri(el,ecc,q,qg,enne) 
least_squares.f90:  call rs(ncor,ncor,gam,eigval,1,eigv,fv1,fv2,ierr)                 
least_squares.f90:     CALL scale_coef!(coo,coord,scales)
least_squares.f90:  call rs(nd,nd,gammas(1:nd,1:nd),eigval(1:nd),1,eigvec(1:nd,1:nd),fv1,fv2,ierr) 
least_squares.f90:     CALL tee(iun8,'WEAK DIRECTION =') 
least_squares.f90:!       CALL prvec(coord(1:3),coord(4:6),angmom)
least_squares.f90:!       CALL prvec(coord(4:6),angmom,lenz)
moid_compute.f90:  CALL earcar(t0,elea%coord,1)
moid_compute.f90:  CALL dmintil_rms(elea,el0,nummin,dmintil)
moid_compute.f90:  CALL coo_cha(el0,'CAR',elcar, fail_flag1)
moid_compute.f90:  CALL nodedi(elcar%coord,elea%coord,dnp,dnm) 
moid_compute.f90:  CALL prvec(x,x(4),c) 
moid_compute.f90:  CALL prvec(xpl,xpl(4),cpl) 
moid_compute.f90:  CALL prvec(cpl,c,vnod) 
moid_compute.f90:  CALL  prvec(x(4),c,vlenz) 
moid_compute.f90:  CALL  prvec(xpl(4),cpl,vlenzpl) 
multiple_sol.f90:  CALL chereq(2,inic,covc,el0%t,iunint,ok) 
multiple_sol.f90:  CALL chetim(obs(1)%time_tdt,obs(mc)%time_tdt,ok) 
multiple_sol.f90:  CALL weak_dir(uncert%g(1:nd,1:nd),wdir,sdir,iunint,el0%coo,el0%coord,units,nd)
multiple_sol.f90:! sigma and imult have to be passed in the call                         
multiple_sol.f90:  CALL nomoid(el0%t,elm(imi0),moid_m(imi0),dnp_m(imi0),dnm_m(imi0))
multiple_sol.f90:     CALL prop_sig(batch,elm(imi-1),elc,dn,sigma,mc,obs,obsw,wdir,sdir,units,fail,nd)
multiple_sol.f90:         CALL constr_fit(mc,obs,obsw,elc,wdir,elm(imi),unm(imi),     &
multiple_sol.f90:        CALL nomoid(elm(imi)%t,elm(imi),moid_m(imi),dnp_m(imi),dnm_m(imi))
multiple_sol.f90:     CALL prop_sig(batch,elm(imi+1),elc,dn,sigmam,mc,obs,obsw,wdir,sdir,units,fail,nd) 
multiple_sol.f90:        CALL constr_fit(mc,obs,obsw,elc,wdir,elm(imi),unm(imi),     &
multiple_sol.f90:        CALL nomoid(elm(imi)%t,elm(imi),moid_m(imi),dnp_m(imi),dnm_m(imi))
multiple_sol.f90:  CALL tee(iun,'SUMMARY OF MULTIPLE SOLUTIONS=')
multiple_sol.f90:     CALL tee(iun,'no       a      h      k      p      q      lambda=')
multiple_sol.f90:     CALL tee(iun,'no       x      y      z    xdot    ydot    zdot=')
multiple_sol.f90:     CALL tee(iun,'no       a      e      I    Omeg    omeg    mean.an=')
multiple_sol.f90:    CALL tee(iun,'no        q      e      I    Omeg    omeg    t.peri=')
multiple_sol.f90:    CALL tee(iun,'no      alpha  delta   adot  ddot     r      rdot=')
multiple_sol.f90:  CALL filopn(iunctc,'mult.ctc','unknown') 
multiple_sol.f90:  CALL wromlh(iunctc,'ECLM','J2000') 
multiple_sol.f90:  CALL tee(iun,'no  RMS ,lastcor,  magn,  MOID ,nod+,nod-, sigQ=') 
multiple_sol.f90:     CALL rmsp(astna0,le)
multiple_sol.f90:        CALL write_elems(elm(i),astna0(1:le),'ML',' ',iunctc,unm(i),DP=dp)
multiple_sol.f90:        CALL write_elems(elm(i),astna0(1:le),'ML',' ',iunctc,unm(i))
multiple_sol.f90:  CALL filclo(iunctc,' ') 
multiple_sol.f90:! logical variables used for call to fmulti                             
multiple_sol.f90:! call to f_multi, distribution version, but with batch mode             
multiple_sol.f90:  CALL f_multi(batch,obsc,inic,ok,covc,elc,uncert,csinor,delnor,mc,obs,obsw,sigma,imult1,nd)
multiple_sol.f90:  CALL filnam('multsol',nam0,'ctc',file,le) 
multiple_sol.f90:  CALL filopn(iunctc,file(1:le),'unknown') 
multiple_sol.f90:  CALL wromlh(iunctc,'ECLM','J2000') 
multiple_sol.f90:  CALL filnam('multsol',nam0,'cat',file,le) 
multiple_sol.f90:  CALL filopn(iuncat,file(1:le),'unknown') 
multiple_sol.f90:  CALL wro1lh(iuncat,'ECLM','J2000','KEP') 
multiple_sol.f90:  CALL filnam('multsol',nam0,'mrep',file,le) 
multiple_sol.f90:  CALL filopn(iunrep,file(1:le),'unknown') 
multiple_sol.f90:     CALL rmsp(astna0,le) 
multiple_sol.f90:        CALL write_elems(elm(i),astna0(1:le),'ML',' ',iunctc,unm(i),DP=dp)
multiple_sol.f90:        CALL write_elems(elm(i),astna0(1:le),'ML',' ',iunctc,unm(i))
multiple_sol.f90:     CALL coo_cha(elm(i),'KEP',elk,fail_flag)
multiple_sol.f90:        CALL write_elems(elk,astna0(1:le),'1L',' ',iuncat)
multiple_sol.f90:  CALL filclo(iunctc,' ') 
multiple_sol.f90:  CALL filclo(iunrep,' ') 
multiple_sol.f90:  CALL filclo(iuncat,' ') 
multiple_sol.f90:  CALL blockset(m,obs,obsw)
multiple_sol.f90:  CALL sort_obs(el0%t,obs,obsw,m,iposs,obs_s,obsw_s)                         
multiple_sol.f90:  CALL sin_cor(m,obs_s,obsw_s,elc,icor6,iun_log,.true.,delnor,csinor,uncert,nd,deq6)
multiple_sol.f90:  CALL weak_dir(uncert%g(1:nd,1:nd),peq,sdir,-1,elc%coo,elc%coord,units,nd)
multiple_sol.f90:!     CALL prop_sig(.true.,elb,elc,dn,sdir,m,obs,obsw,peq,sdir,units,fail)
multiple_sol.f90:  CALL unsort_obs(iposs,m,obsw_s,obsw)
multiple_sol.f90:! -----for call to rdorb----                                            
multiple_sol.f90:  CALL rmsp(catname1,le) 
multiple_sol.f90:  CALL oporbf(catname1(1:le),0) 
multiple_sol.f90:     CALL rd_orb(name0,eq,eltype,t,g,defcov,c,defnor,h,sl,mass,rsys,epoch,&
multiple_sol.f90:     CALL splinam(name0,name1,imul(i)) 
multiple_sol.f90:  CALL  predic_obs(elm(imi0),ids,t1,type,       &
multiple_sol.f90:  CALL outobc(iun20,type,ids,tut1,alpha,delta,amagn(imi0),adot,ddot,&
multiple_sol.f90:     CALL  predic_obs(elm(i),ids,t1,type,alm(i),dem(i),amagn(i),inl,   &
multiple_sol.f90:     CALL outobc(iun20,type,ids,tut1,alm(i),dem(i),amagn(i),        &
multiple_sol.f90:     CALL angupd(alm(i),alm(i-1),ng) 
multiple_sol.f90:     CALL  predic_obs(elm(i),ids,t1,type,alm(i),dem(i),amagn(i),inl,  &
multiple_sol.f90:     CALL outobc(iun20,type,ids,tut1,alm(i),dem(i),amagn(i),        &
multiple_sol.f90:     CALL angupd(alm(i),alm(i+1),ng) 
multiple_sol.f90:  CALL outmul(titnam,filnam,tut1,sigma,alpha,delta,                 &
multiple_sol.f90:     CALL pro_ele(elm(j),tr,elm(j),unm(j),unm(j)) 
multiple_sol.f90:     CALL nomoid(tr,elm(j),moid_m(j),dnp_m(j),dnm_m(j))
multiple_sol.f90:  CALL tee(iun20,'SUMMARY OF MULTIPLE SOLUTIONS=') 
multiple_sol.f90:     CALL tee(iun20,'no       a      h      k      p      q      lambda=')
multiple_sol.f90:     CALL tee(iun20,'no       x      y      z    xdot    ydot    zdot=')
multiple_sol.f90:     CALL tee(iun20,'no       a      e      I    Omeg    omeg    mean.an=')
multiple_sol.f90:    CALL tee(iun20,'no        q      e      I    Omeg    omeg    t.peri=')
multiple_sol.f90:    CALL tee(iun20,'no      alpha  delta   adot  ddot     r      rdot=')
multiple_sol.f90:  CALL tee(iun20,'no.,  magn,  MOID ,  nod+  ,  nod-=') 
multiple_sol.f90:  CALL menu(icoo,menunam,3,' which coordinates to plot?=',            &
multiple_sol.f90:           CALL coo_cha(elm(j),'COM',elcom,fail_flag)
multiple_sol.f90:        CALL coo_cha(elm(imi0),'COM',elcom,fail_flag)
multiple_sol.f90:        CALL coo_cha(elm(j),'COM',elcom,fail_flag)
multiple_sol.f90:     CALL coo_cha(elm(imi0),'COM',elcom,fail_flag)
multiple_sol.f90:        CALL coo_cha(elm(j),'ATT',elcom,fail_flag)
multiple_sol.f90:     CALL coo_cha(elm(imi0),'ATT',elcom,fail_flag)
multiple_sol.f90:  CALL ploae(elm(imi0)%t,a,e,aa,ee,sigma,numb,titnam,xlab,ylab)
multiple_sol.f90:  CALL rmsp(filnam1,le) 
multiple_sol.f90:  CALL filopn(iun7,file,'unknown') 
multiple_sol.f90:  CALL mjddat(t1,iday,imo,iy,hour) 
multiple_sol.f90:     CALL sessag(daa,siga,inta,mina,seca) 
multiple_sol.f90:     CALL sessag(dee,sigd,intd,mind,secd) 
multiple_sol.f90:  CALL filclo(iun7,' ') 
multiple_sol.f90:     CALL plocbd(titnam,alpha,delta,sigma,t1,                       &
multiple_sol.f90:     CALL ploobs(titnam,alpha,delta,sigma,t1,                       &
multiple_sol.f90:  CALL int_step(elt,el2,h,imint,mc,obs,obsw,iun,wdir,sdir,units,fail,nd) 
multiple_sol.f90:     CALL whicor(0,nd,icor,ncor,inew) 
multiple_sol.f90:     CALL diff_cor(mc,obs,obsw,elt,icor,iun,eltp,uncert,csinor,delnor,succ,nd)
multiple_sol.f90:     CALL weak_dir(uncert%g(1:nd,1:nd),wdir,sdir,iun,eltp%coo,eltp%coord,units,nd) 
multiple_sol.f90:        CALL whicor(0,nd,icor,ncor,inew) 
multiple_sol.f90:        CALL diff_cor(mc,obs,obsw,el12,icor,iun,el12p,un12,csino12,delno12,succ,nd)
multiple_sol.f90:        CALL weak_dir(un12%g(1:nd,1:nd),wdir12,sdir12,iun,el12p%coo,el12p%coord,units,nd) 
multiple_sol.f90:! =============for call to read_elems=============================
multiple_sol.f90:  CALL rmsp(catname,le)
multiple_sol.f90:  CALL filopn(iuncat,catname(1:le),'old')
multiple_sol.f90:  CALL oporbf(file,iuncat) 
multiple_sol.f90:  CALL rmsp(repname,le) 
multiple_sol.f90:  CALL filopn(iunrep,repname(1:le),'old') 
multiple_sol.f90:     CALL read_elems(eltmp,name0,eof,file,iuncat,unctmp,dptmp,nd)
multiple_sol.f90:     CALL splinam(name0,name1,j) 
multiple_sol.f90:  CALL clorbf 
multiple_sol.f90:  CALL filclo(iunrep,' ') 
multiple_sol.f90:  CALL retinobs(obsdir,astname,obs0,error_model,rms_m,rmsmag_m)
multiple_sol.f90:  CALL errmod_set(error_model)
multiple_sol.f90:  CALL weak_dir(unm(imu)%g(1:nd,1:nd),wdir,sdir,-1,elm(imu)%coo,elm(imu)%coord,units,nd) 
multiple_sol.f90:  CALL prop_sig(batch,elm(imu),el0,s,deltasig,m_m,obs_m,obsw_m,wdir,sdir,units,fail,nd)
multiple_sol.f90:  CALL constr_fit(m_m,obs_m,obsw_m,el0,wdir,elc,unc0,csinew,delnew,rmshnew,nused,succ,nd)
multiple_sol.f90:  CALL heapsort(obs_m(1:m_m)%time_tdt,m_m,ind)
multiple_sol.f90:  CALL calendwri(obs_m(ind(1))%time_tdt,calend1) 
multiple_sol.f90:  CALL calendwri(obs_m(ind(m_m))%time_tdt,calend2) 
multiple_sol.f90:  call versor(n,a,epsi,v(1,1),vl,ize) 
multiple_sol.f90:     call versor(n,ws,epsi,v(1,2+jok),vl,ize) 
multiple_sol.f90:                    ! call lincog(n,v(1,2+jok),1.d0,v(1,1+jj),cc,v(1,2+jok)) 
multiple_sol.f90:           call versor(n,v(1,2+jok),epsi,v(1,2+jok),vl,ize) 
non_grav.f90:         CALL prvec(x,v,hu)
non_grav.f90:        CALL fser_propag(x,v,t0,-dyn%dp(4),gms,xdelay(1:3),xdelay(4:6))
non_grav.f90:        CALL prvec(x,v,hu)
obs_correl.f90:        CALL rmsp(file,lf)
obs_correl.f90:        CALL rdcorm(file)
obs_correl.f90:   CALL fcorob(kfun(if1),nfom(ic),par(ip1),nparf(if1),dt,covra)
obs_correl.f90:   CALL fcorob(kfun(if1),nfo(obs1%obscod_i,ic),par(ip1),nparf(if1),dt,covra)
obs_correl.f90:   CALL fcorob(kfun(if1),nfom(ic),par(ip1),nparf(if1),dt,covdec)
obs_correl.f90:   CALL fcorob(kfun(if1),nfo(obs1%obscod_i,ic),par(ip1),nparf(if1),dt,covdec)
obs_correl.f90:      CALL filopl(unit,file)
obs_correl.f90:      CALL norstr(rec1,lr)
obs_correl.f90:      CALL fcsfun(rec,kfun(nfunt),nparf(nfunt))
obs_correl.f90:      CALL filclo(unit,' ')
obs_correl.f90:         CALL rrmscl(filea,filed,.false.)
obs_correl.f90:          CALL accstr(acca,accd,ads(1),ads(2),error)
obs_correl.f90:          CALL crmscl(idsta,ads,mpctyp,tdt,rmsa,rmsd,biasa,biasd,idcl,orstep,tdtlim)
obs_correl.f90:      CALL filopl(unit,file)
obs_correl.f90:          CALL statcode(cobsc,obsc)
obs_correl.f90:      CALL filclo(unit,' ')
obs_correl.f90:      CALL rmsp(ads,lads)
obssto.f90:    CALL rmsp(obsdir1,le) 
obssto.f90:    CALL rmsp(rwofi0,lrwo)
obssto.f90:       CALL read_rwo(rwofi0(1:lrwo),obs_m,obsw_m,m_m,error_model,rms,rmsmag)
obssto.f90:    CALL aster_radius(obs_m%objdes,obs_m%type,m_m)
offlov_checktp.f90:     CALL lovinterp(va_tracenew%rindex,deltasig,el,uncnew,falsok)
offlov_checktp.f90:  CALL lovinterp(va_tracenew%rindex,deltasig,el0,unc0,falsok) 
offlov_checktp.f90:!     CALL slinel(dtpdt,unc0%g,unc0%c,ceicel,b,v)
offlov_checktp.f90:     CALL slinel(dtpdt,uncnew%g,uncnew%c,ceicel,b,v)
offlov_checktp.f90:     CALL whicor(inter,nd, icor,ncor,inew) 
offlov_checktp.f90:     CALL diff_cor(m_m,obs_m,obsw_m,el,icor,iun20m,el,uncnew,csinew,delnew,succ,nd)
offlov_checktp.f90:     CALL aftclov(iplam,el0%t,va_tracemin%tcla,v_infi,tbefore,tafter) 
offlov_checktp.f90:     CALL cov_avai(uncnew,el0%coo,el0%coord) 
offlov_checktp.f90:     CALL pro_ele(el,tafter,el1,uncnew,unc1)
offlov_checktp.f90:     CALL arrloadtp(va_tracenew,va_tracemin%rindex) 
offlov_checktp.f90:        CALL lovmagn(rrrr,vvvv,h) ! vvvv is v_infty, replaced by current U 
offlov_checktp.f90:        CALL calendwri(tcl,calend)
offlov_checktp.f90:        CALL newton_checktp(iunnew,iunwarn,va_tracemin,b_e,distmin,va_tracenew,fold)
offlov_checktp.f90:           CALL rmsp(riskfile,le) 
offlov_checktp.f90:           CALL rmsp(riskesafile,lee) 
offlov_checktp.f90:        IF(iunrisk1.le.0) CALL header_risk(0)
offlov_checktp.f90:        CALL store_vi()
offlov_checktp.f90:         CALL lovmagn(rindex,vinf,h) 
offlov_checktp.f90:         CALL calendwri(tcl,calend)
offlov_checktp.f90:         CALL rmsp(riskfile,le) 
orbit_elements.f90:   IF(PRESENT(del)) CALL eye(6,del)
orbit_elements.f90:         CALl eye(6,del1)     ! initialize by identity
orbit_elements.f90:            IF(fail_flag.gt.0) CALl eye(6,del)! del non exi, set to identity
orbit_elements.f90:            IF(fail_flag.gt.0) CALl eye(6,del)! del non exi, set to identity
orbit_elements.f90:      CALL coo_cha(el,'CAR',el1,fail_flag)
orbit_elements.f90:   call prvec(x,y,ang)       !  angular momentum 
orbit_elements.f90:   call prvec(y,ang,vlenz) ! Lenz vector
orbit_elements.f90:   CALL earcar(el%t,xpla,1)
orbit_elements.f90:   CALL earcar(el%t,xpla,1)
orbit_elements.f90:         CALL solve_peri(r0,sig0,peri,gm,alpha,psi,dt)
orbit_elements.f90:      CALL prvec(vlenz,x,ww)
orbit_elements.f90:      CALL solve_peri(r0,sig0,peri,gm,alpha,psi,dt)
orbit_elements.f90:      CALL fser_propag_der(x0,y0,0.d0,dt,gm,x,y,del3)
orbit_elements.f90:      CALL fser_propag(x0,y0,0.d0,dt,gm,x,y)
orbit_elements.f90:         CALL eye(3,eye3)
orbit_elements.f90:   IF(PRESENT(del)) CALL eye(6,del)
orbit_elements.f90:! CALL ta_from_t0(el%coord(1),ecc,dt,gm,alpha,v,dvdq,dvde,dvdt0)
orbit_elements.f90:   CALL coo_cha(el,'CAR',elcar,fail_flag1,delcar)
orbit_elements.f90:   CALL coo_cha(elcar,'COT',elcot, fail_flag2,dcarel)
orbit_elements.f90:   CALL coo_cha(el,'CAR',elcar,fail_flag1)
orbit_elements.f90:   CALL coo_cha(elcar,'COT',elcot, fail_flag2)
orbit_elements.f90:  CALL eye(5,del(1:5,1:5))
orbit_elements.f90:  CALL solve_kepuniv2(dt,q,sig0,mu,alpha,ecc,psi,s0,s1,s2,s3,DS2DA=ds2da,DS0DA=ds0da)
orbit_elements.f90:!  CALL s_funct(psi,alpha+dd,s0v,s1v,s2v,s3v)
orbit_elements.f90:!  CALL solve_kepuniv2(dt,q,sig0,mu,alpha+dd,ecc,psiv,s0v,s1v,s2v,s3v)
orbit_elements.f90:   CALL coo_cha(el,'CAR',elcar,fail_flag1,delcar)
orbit_elements.f90:   CALL coo_cha(elcar,'COM',elcom, fail_flag2,dcarel)
orbit_elements.f90:   CALL coo_cha(el,'CAR',elcar,fail_flag1)
orbit_elements.f90:   CALL coo_cha(elcar,'COM',elcom, fail_flag2)
orbit_elements.f90:   IF(PRESENT(del)) CALL eye(6,del)
orbit_elements.f90:  CALL iter_obs(el%t,el%coord,obscode,xtop,tobs,dis0,target_center)
orbit_elements.f90:        CALL prodmv(ddd,ddddx,dv)
orbit_elements.f90:        CALL prodmv(del(4,1:3),roteqec,ddd)
orbit_elements.f90:        CALL prodmv(ddd,ddadx,dv) 
orbit_elements.f90:        CALL prodmv(ddd,ddddx,dv)
orbit_elements.f90:      CALL observer_position(tc,xobs(1:3),xobs(4:6),OBSCODE=obscode)
orbit_elements.f90:      CALL earcar(tc,xpla,1) ! xpla=heliocentric ecliptic of geocenter
orbit_elements.f90:      CALL prodmv(xtop(1:3),roteceq,xtop(1:3)) ! xtop=topocentric equatorial
orbit_elements.f90:      CALL prodmv(xtop(4:6),roteceq,xtop(4:6))
orbit_elements.f90:      CALL observer_position(tc,xobs(1:3),xobs(4:6),OBSCODE=obscode)
orbit_elements.f90:     CALL observer_position(tobs,xobs(1:3),xobs(4:6),OBSCODE=obscode)
orbit_elements.f90:     CALL earcar(tobs,xpla,1) ! xpla=heliocentric ecliptic of geocenter
orbit_elements.f90:     CALL observer_position(tobs,xobs(1:3),xobs(4:6),OBSCODE=obscode)
orbit_elements.f90:     CALL prodmv(x(1:3),roteqec,att(5)*rhat)
orbit_elements.f90:     CALL prodmv(x(4:6),roteqec,att(6)*rhat+r*(att(3)*ralphat+att(4)*rdelhat))
orbit_elements.f90:  CALL noniter_obs(tobs,el%obscode,xobs,target_center)
orbit_elements.f90:        CALL prodmv(del(1:3,1),roteqec,ralphat*r)
orbit_elements.f90:        CALL prodmv(del(1:3,2),roteqec,rdelhat*r)
orbit_elements.f90:        CALL prodmv(del(1:3,5),roteqec,rhat)
orbit_elements.f90:        CALL prodmv(del(4:6,1),roteqec,att(6)*ralphat+att(5)*(att(3)*ralpalp+att(4)*ralpdel))
orbit_elements.f90:        CALL prodmv(del(4:6,2),roteqec,att(6)*rdelhat+att(5)*(att(3)*ralpdel+att(4)*rdeldel))
orbit_elements.f90:        CALL prodmv(del(4:6,5),roteqec,att(3)*ralphat+att(4)*rdelhat)
orbit_elements.f90:  CALL statcode(att%obscod, elatt%obscode)
orbit_elements.f90:  CALL coo_cha(elatt,'CAR',xcar,fail_flag)
orbit_elements.f90:  CALL earcar(att%tdtobs,xpla,1)
orbit_elements.f90:     CALL prodmv(xx1,roteqec,xx)
orbit_elements.f90:     CALL observer_position(att%tdtobs,pos,vel,OBSCODE=elatt%obscode)
orbit_elements.f90:     CALL undefined_orb_uncert(6,unc)
orbit_elements.f90:     CALL tchinv(att%g,4,unc%c(1:4,1:4),ws,indp)
orbit_elements.f90:  CALL admis_reg(name0,iunmat,attr%tdtobs,attr%angles,attr%obscod,  &
orbit_elements.f90:  CALL attelements(attr,rr,rdot,elk,uncatt)
orbit_elements.f90:  call prvec(x,y,ang)           !  angular momentum 
orbit_elements.f90:  CALL rotmhalfgam(sinhalfgam,ang,rottp,drotpdg2,dtaudJ)
orbit_elements.f90:  CALL rotmt(-Omeg,ROmeg,3)
orbit_elements.f90:  CALL rotmt(Omeg,RmOmeg,3)
orbit_elements.f90:  CALL rotmt(-Incl,RIncl,1)
orbit_elements.f90:  CALL rotmt(Incl,RmIncl,1)
orbit_elements.f90:  CALL rotmt(gmez,Rmhgam,3)
orbit_elements.f90:  CALL eye(3,delta) ! Kronecker's delta
orbit_elements.f90:  CALL drvdytp(xytp(4:6),drv,rv)
orbit_elements.f90:!  CALL mtp_ref(v1,v2,rvt,rv) 
orbit_elements.f90:     CALL oporbf(file,0)
orbit_elements.f90:     CALL rd_orb(name,elem,eltype,t0,cove,defcov,nore,defnor,     &
orbit_elements.f90:     CALL rd_orb(name,elem,eltype,t0,cove,defcov,nore,defnor,     &
orbit_elements.f90:     IF(.not.PRESENT(unit)) CALL clorbf
orbit_elements.f90:     CALL statcode(obscod,iobs)
orbit_elements.f90:     CALL undefined_orb_uncert(nd_cur,covar)
orbit_elements.f90:     CALL fixcnm(defcov,defnor,defcn,cove,nore)
orbit_elements.f90:  IF(.not.PRESENT(unit)) CALL clorbf
orbit_elements.f90:     CALL filopn(uniout,file,'unknown')
orbit_elements.f90:        CALL codestat(el%obscode,obscod)
orbit_elements.f90:        CALL wro1lh(uniout,rsys,epoch,el%coo)
orbit_elements.f90:        CALL wromlh(uniout,rsys,epoch)
orbit_elements.f90:  CALL rmsp(namloc,le)
orbit_elements.f90:     CALL wro1lr(uniout,namloc(1:le),el%coord,el%coo,el%t,el%h_mag,el%g_mag)
orbit_elements.f90:     CALL codestat(el%obscode,obscod)
orbit_elements.f90:        CALL wromlr(uniout,namloc(1:le),el%coord,el%coo,el%t,cove(1:nd,1:nd), &
orbit_elements.f90:        CALL wromlr(uniout,namloc(1:le),el%coord,el%coo,el%t,cove(1:nd,1:nd), &
orbit_elements.f90:  IF(.not.PRESENT(unit)) CALL filclo(uniout,' ')
orbit_elements.f90:  CALL convertcovdp(nd,unc1%g(1:nd,1:nd),dee,unc2%g(1:nd,1:nd))
orbit_elements.f90:  CALL norprsdp(unc1%c(1:nd,1:nd),dee,nd,unc2%c(1:nd,1:nd),error)
orbit_elements.f90:  CALL convertcov(nd,unc1%g(1:nd,1:nd),dee(1:nd,1:nd),unc2%g(1:nd,1:nd))
orbit_elements.f90:  CALL norprs(unc1%c(1:nd,1:nd),dee(1:nd,1:nd),nd,unc2%c(1:nd,1:nd),error)
orbit_elements.f90:     call rmsp(file,lnf) 
orbit_elements.f90:     call filopn(unit,file(1:lnf),'unknown') 
orbit_elements.f90:     CALL wromlh (unit,'ECLM','J2000') 
orbit_elements.f90:  call rmsp(name,lnn) 
orbit_elements.f90:  CALL coo_cha(elem,'KEP',elk,fail_flag,dkde) 
orbit_elements.f90:  CALL nomoid(elem%t,elem,moid,anode,dnode) 
orbit_elements.f90:     CALL convertunc(cove,dkde,covk)
orbit_elements.f90:     call filclo(unit,' ') 
orbit_elements.f90:  CALL coo_cha(el0,'EQU',eleq,fail_flag)
orbit_elements.f90:     CALL fidinam(eledir,nam0,'eq0',elefi0,le)
orbit_elements.f90:     CALL rmsp(file,le)
orbit_elements.f90:     CALL read_elems(elk,name,eof,elefi0(1:le),COVAR=unck) 
orbit_elements.f90:         CALL write_err(nam0,iunout,' ELEMENTS NOT FOUND')
orbit_elements.f90:     CALL write_err(nam0,iunout,' ELEMENT FILE NOT FOUND') 
orbit_elements.f90:        CALL coo_cha(elk,coox,el0,fail_flag,dee)
orbit_elements.f90:        CALL convertunc(unck,dee,unc0)
orbit_elements.f90:        CALL coo_cha(elk,coox,el0,fail_flag)
orbit_elements.f90:        CALL write_err(nam0,iunout,' FAILED COORD CHANGE ')
orbit_elements.f90:        CALL write_err(nam0,iunout,' HYPERBOLIC COORD CHANGE ')
orbit_elements.f90:     CALL weak_dir(gammas(1:n_par,1:n_par),wdir(1:n_par),sdir,-1,eltype,ele,units(1:n_par),n_par)
orbit_elements.f90:     CALL rs(n_par,n_par,gammas(1:n_par,1:n_par),eigval(1:n_par),1,eigvec(1:n_par,1:n_par),fv1,fv2,ierr) 
orbit_elements.f90:      CALL getrsc(orbunt,rec,orbnr,eof) 
orbit_elements.f90:      CALL strcnt(rec,name,rest,error) 
orbit_elements.f90:      CALL getrsc(orbunt,name,orbnr,eof) 
orbit_elements.f90:      CALL getrsc(orbunt,rec,orbnr,end1) 
orbit_elements.f90:      CALL getrsc(orbunt,rec,orbnr,end1) 
orbit_elements.f90:         CALL ch2tim(rec,mjd,sec,scale,error) 
orbit_elements.f90:         CALL cnvtim(mjd,sec,scale,mjde,sece,'TDT') 
orbit_elements.f90:            CALL getrsc(orbunt,rec,orbnr,end1) 
orbit_elements.f90:            CALL getrsc(orbunt,rec,orbnr,end1) 
plocbd.f90:      call rmsp(titnam,le) 
plocbd.f90:    2 call getdev(idev) 
plocbd.f90:      call plotob(a,e,aa,ee,npo,xlab,ylab,title,idev,istyle) 
plocbd.f90:      CALL menu(idev,menunam,7,                                         &
plocbd.f90:      call rmsp(titnam,le) 
plocbd.f90:    2 call getdev(idev) 
plocbd.f90:      call plotob(xd,yd,0.d0,0.d0,npo,xlab,ylab,title,idev,istyle) 
plocbd.f90:      call rmsp(titnam,le) 
plocbd.f90:    2 call getdev(idev) 
plocbd.f90:      call plotob(xd,yd,xx,yy,npo,xlab,ylab,title,idev,istyle) 
plocbd.f90:         CALL system('xterm -t -e gnuplot giffv.gnu') 
plocbd.f90:         CALL system('gnuplot giffv.gnu') 
plocbd.f90:!        call system('lpr giffv.ps')                                    
plocbd.f90:!        call system('lpr giffv.ps -h')                                 
pred_obs.f90:! method: call with minimum set of arguments results in simple
pred_obs.f90:     CALL alph_del2 (el,tobs,idsta,obs4,ider,nd,dobde,      &
pred_obs.f90:     CALL obscoo(idsta,posr,stname) ! transmitter and receiver assumed both idsta
pred_obs.f90:     CALL r_rdot (el,tobs,idstarad,tech,posr,posr,alpha,delta,       &
pred_obs.f90:  CALL ellips(daddet(1:nd,1:2),gameq(1:nd,1:nd),sig,axes,gamad)
pred_obs.f90:     CALL alph_del2 (el,tobs,idsta,obs4,ider,nd,dobde,TWOBO=.true.,ELOMOON0=elmoon) 
pred_obs.f90:  CALL slinel(daddet(1:nd,1:2),gameq(1:nd,1:nd),ceq(1:nd,1:nd),ceicel,b,v)                          
pred_obs.f90:  CALL linobs(ibvu,npo,el,axes,sig,b,v,sigma,ceicel,el_m,npo1)        
pred_obs.f90:        CALL alph_del2 (elv,tobs,idsta,obs4,ider,nd,dobde,&
pred_obs.f90:           CALL alph_del2 (elv,tobs,idsta,obs4,ider,nd,dobde, &
pred_obs.f90:           CALL r_rdot (el,tobs,idstarad,tech,posr,posr,al_m(n),de_m(n), & 
pred_obs.f90:           CALL angupd(al_m(n),al_m(n-1),ng)                                
pred_obs.f90:  CALL alph_del2 (el,tobs,idsta,att4,ider,nd,dadde,      &
pred_obs.f90:  CALL cnvtim(mjd1,sec1,'TDT',mjd2,sec2,'UTC')
pred_obs.f90:  CALL codestat(idsta,obscod)
pred_obs.f90:  CALL ellipsoid(nd,daddet(1:nd,4),gameq(1:nd,1:nd),sig,axes,gamad)
pred_obs.f90:  CALL propag(el,tobs,xast,xea,ider,nd,dxdpar,twobo1) 
pred_obs.f90:  CALL oss_dif2(xast,xea,tobs,iobscod,obs4,ider,dobdx,      &
pred_obs.f90:     CALL observer_position(tobs,xo,vo,OBSCODE=iobscod)
pred_obs.f90:!     call pvobs(tobs,iobscod,xo,vo) 
pred_obs.f90:     CALL obscoo(iobscod,xoequ,stname)
pred_obs.f90:     CALL cartesian_to_geodetic(xoequ,xolon,xolat,xoalt,xovert)
pred_obs.f90:     CALL obs2ecl(tobs,iobscod,xovert,xovert2)
pred_obs.f90:     CALL aber1(d,xast(4:6),dcor)
pred_obs.f90:     CALL aber2(d,xast,xobsea,dcor) 
pred_obs.f90:     CALL earcar(tobs,xea1,1)
pred_obs.f90:  CALL prvec(d1,xobsea1(1:3),vvv)
pred_obs.f90:  CALL mooncar(tobs,xmoon,1)
pred_obs.f90:  CALL prvec(d1,xobmoon,vvv)
pred_obs.f90:! method: call with minimum set of arguments for attribute only
pred_obs.f90:  call propag(el,tobs,xast,xea,ider,6,TWOBO=twobo1) 
pred_obs.f90:  call propag(el,tauj,xast,xea,ider,nd,dxdpar,twobo)
pred_obs.f90:  CALL oss_dif(xast,xea,tauj,iocj,pos,vel,alj,dej,ider,dadx,dddx,&
pred_obs.f90:!           call pvobs(tauj,idst,xo,vo) 
pred_obs.f90:!            call vdiff(d,xo,d) 
pred_obs.f90:!            call vdiff(d(4),vo,d(4))
pred_obs.f90:      CALL aber1(d,xast(4:6),dcor) 
pred_obs.f90:      CALL aber2(d,xast,xobsea,dcor) 
pred_obs.f90:      CALL earcar(tauj,xea1,1)
pred_obs.f90:   CALL prvec(d1,xobsea1,vvv)
pred_obs.f90:   CALL mooncar(tauj,xmoon,1)
pred_obs.f90:   CALL prvec(d1,xobmoon,vvv)
pred_obs.f90:      call prodmv(deq,roteceq,d) 
pred_obs.f90:      call prodmv(deq(4),roteceq,d(4))
pred_obs.f90:  CALL observer_position(tr,xre,yre,BFPOS=posr,PRECISION=2)
pred_obs.f90:!  call pvobs3(tr,posr,xre,yre)
pred_obs.f90:  call times(tr+2400000.5,temp,tdiffr) 
pred_obs.f90:  call propag(el,tretdb,xastr,xea,ider,nd,dxdpar) 
pred_obs.f90:  rre=xea(1:3) + xre  ! CALL vsumg(3,xea,xre,rre) 
pred_obs.f90:  vre=xea(4:6) + yre  ! CALL vsumg(3,xea(4),yre,vre) 
pred_obs.f90:     rhorv=xast(1:3)-rre ! CALL vdiff(xast,rre,rhorv) 
pred_obs.f90:!     CALL coocha(xastr,'CAR',gms,eqast,'EQU',enne) 
pred_obs.f90:     CALL fser_propag(xastr(1:3),xastr(4:6),tretdb,tb,gms,xast(1:3),xast(4:6))
pred_obs.f90:!     CALL prop2b(tretdb,eqast,tb,xast,gms,0,dxde,ddxde) 
pred_obs.f90:  rhordv=xast(4:6)-vre  ! CALL vdiff(xast(4),vre,rhordv) 
pred_obs.f90:  CALL earcar(tretdb,xsun,ifla) 
pred_obs.f90:  vressb=xsun(4:6)+vre ! CALL vsumg(3,vre,xsun(4),vressb) 
pred_obs.f90:  CALL earcar(tb,xsun,ifla) 
pred_obs.f90:  vastssb=xast(4:6)+xsun(4:6)  ! CALL vsumg(3,xast(4),xsun(4),vastssb) 
pred_obs.f90:! call the Earth-rotation model in TDT                                  
pred_obs.f90:     CALL times(tt+2400000.5,temp,tdifft) 
pred_obs.f90:     CALL earcar(tt-(tdifft/86400.d0),xea,ifla) 
pred_obs.f90:     CALL observer_position(tt,xtr,ytr,BFPOS=post,PRECISION=2)
pred_obs.f90:!     CALL pvobs3(tt,post,xtr,ytr)
pred_obs.f90:  CALL earcar(tt,xsun,ifla) 
pred_obs.f90:  call deldop1(rast,rastd,rhot,rhotd,rsta,rstad,deldoptr) 
pred_obs.f90:  call deldop1(rast,rastd,rhor,rhord,rsta,rstad,deldopre) 
pred_obs.f90:  call deldop2(xast,xtr,ytr,rgeo,rgeod,rhotv,rhotdv,rhot,rhotd,deldoptr)
pred_obs.f90:  call deldop2(xast,xre,yre,rgeo,rgeod,rhorv,rhordv,rhor,rhord,deldopre)
pred_obs.f90:      CALL mjddat(t1,iday,imonth,iyear,hour) 
pred_obs.f90:         CALL sessag(alpha*degrad/15.d0,signo,ihour,imin,sec) 
pred_obs.f90:         CALL rmsp(tmpstr,ln) 
pred_obs.f90:         CALL sessag(delta*degrad,signo,ideg,imin,sec) 
pred_obs.f90:         CALL rmsp(tmpstr,ln) 
pred_obs.f90:! first call of fser_propag. Determine new ro and dt
pred_obs.f90:  CALL fser_propag(xast(1:3),xast(4:6),t0,-dt,gms,xastcor(1:3),xastcor(4:6))
pred_obs.f90:  CALL fser_propag(xast(1:3),xast(4:6),t0,-dt,gms,xastcor(1:3),xastcor(4:6))
pred_obs.f90:  CALL rise_and_set(alpha,delta,tref,longitude,latitude,altitude,t_rise_aux,t_set_aux,t_transit,visib)
pred_obs.f90:     CALL rise_and_set(alpha_loop1,delta_loop1,tref_loop1,longitude,latitude,altitude,t_rise_aux,t_set_aux,t_transit_aux,visib_aux)
pred_obs.f90:     CALL rise_and_set(alpha_loop2,delta_loop2,tref_loop2,longitude,latitude,altitude,t_rise_aux,t_set_aux,t_transit_aux,visib_aux)
pred_obs.f90:  CALL gmstd(mjd_aux,0.d0,gmst,gmstd1,gmstd2,0)       ! compute Greenwich Mean Sidereal Time
propag_state.f90:! call private propagation routine, requiring derivatives               
propag_state.f90:  CALL propag(el0,t1,xastr,xear,ider,nd,dxdpar,TWOBO=twobo1) 
propag_state.f90:     CALL coo_cha(el2,el0%coo,el1,fail_flag,de1dx,OBSCODE=obscode)
propag_state.f90:     CALL propagunc(nd,unc0,de1de0,unc1)
propag_state.f90:     CALL coo_cha(el2,el0%coo,el1,fail_flag,OBSCODE=obscode)
propag_state.f90:!    from the state reached at thew previous call rather than restarting.
propag_state.f90:! asteroid elements at the previous call  
propag_state.f90:        CALL masjpl
propag_state.f90:        CALL eamoon_mass
propag_state.f90:        CALL earcar(t2,xea1,1)
propag_state.f90:        CALL prop2b(el%t,el%coord,t2,xast,gmcur,ider,dxdpar,ddxde) 
propag_state.f90:        IF(ider.eq.1) CALL eye(6,dxda)
propag_state.f90:           CALL coo_cha(el,'CAR',eleq,fail_flag,dxda) ! the matrix is d(car)/de 
propag_state.f90:           CALL matin(dxda,det,6,0,6,ising,1)  ! converted to de/d(car)
propag_state.f90:           CALL coo_cha(el,'CAR',eleq,fail_flag)
propag_state.f90:        CALL fser_propag(el%coord(1:3),el%coord(4:6),el%t,t2,gmcur,xast(1:3),xast(4:6))
propag_state.f90:        CALL fser_propag_der(el%coord(1:3),el%coord(4:6),el%t,t2,gmcur,xast(1:3),xast(4:6),dxdx)
propag_state.f90:     CALL set_clost(.true.)
propag_state.f90:     CALL coo_cha(el,'CAR',elcar,fail_flag,dx0de)
propag_state.f90:     CALL clo_test(elcar,iplamloc) 
propag_state.f90:        CALL ecc_peri(el,ecc,q,qg,enne)
propag_state.f90:        CALL ecc_peri(el,ecc,q,qg,enne) 
propag_state.f90:           call sel_met(ecc,q,qg,hmax)
propag_state.f90:           call sel_met_sat(ecc,q,qg,hmax)
propag_state.f90:        CALL masjpl    
propag_state.f90:        CALL eamoon_mass
propag_state.f90:        call sel_ste(ecc,enne,error,mms,hmax,hgiv) 
propag_state.f90:        CALL inivar(y1,nvar2,nvar) 
propag_state.f90:     call propin(nfl,y1,t1,t2,y2,h,nvar,nd,dxp0dep0(1:nd,1:nd))
propag_state.f90:     CALL varwra(y2,dxdxp0(1:6,1:nd),nd,nvar,nvar2) 
propag_state.f90:  call rdnint('propag.','imet',imet,.true.,found,fail1,fail) 
propag_state.f90:  call rdnrea('propag.','deltos',deltos,.true.,found,fail1,fail)
propag_state.f90:  call rdnrea('propag.','error',error,.true.,found,fail1,fail) 
propag_state.f90:  call rdnint('propag.','iord',iord,.true.,found,fail1,fail) 
propag_state.f90:  call rdnrea('propag.','hms',hms,.true.,found,fail1,fail) 
propag_state.f90:  call rdnrea('propag.','hmax_me',hmax_me,.true.,found,fail1,fail) 
propag_state.f90:  call rdnrea('propag.','epms',epms,.true.,found,fail1,fail)
propag_state.f90:  call rdnint('propag.','iork',iork,.true.,found,fail1,fail) 
propag_state.f90:  call rdnrea('propag.','eprk',eprk,.true.,found,fail1,fail) 
propag_state.f90:  call rdnint('propag.','lit1',lit1,.true.,found,fail1,fail) 
propag_state.f90:  call rdnint('propag.','lit2',lit2,.true.,found,fail1,fail) 
propag_state.f90:  call rdnint('propag.','llev',llev,.true.,found,fail1,fail) 
propag_state.f90:  call rdnrea('propag.','hev',hev,.true.,found,fail1,fail) 
propag_state.f90:  call rdnrea('propag.','eprk_r',eprk_r,.true.,found,fail1,fail)
propag_state.f90:  call rdnint('propag.','lit1_r',lit1_r,.true.,found,fail1,fail) 
propag_state.f90:  call rdnint('propag.','lit2_r',lit2_r,.true.,found,fail1,fail)
propag_state.f90:  call rdnint('propag.','lit1_rc',lit1_rc,.true.,found,fail1,fail) 
propag_state.f90:  call rdnint('propag.','lit2_rc',lit2_rc,.true.,found,fail1,fail)
propag_state.f90:  call rdnrea('propag.','eprk_c',eprk_c,.true.,found,fail1,fail) 
propag_state.f90:  call rdnint('propag.','lit1_c',lit1_c,.true.,found,fail1,fail) 
propag_state.f90:  call rdnint('propag.','iusci',iusci,.true.,found,fail1,fail) 
propag_state.f90:     call legnum(isrk,isfl) 
propag_state.f90:  call compco(mms+2,c_ms0,f_ms0,b_ms0,a_ms0) 
propag_state.f90:  call reaflo(iun,'h',hmax) 
propag_state.f90:  call reaint(iun,'iauto',iauto) 
propag_state.f90:  call reaflo(iun,'error',error) 
propag_state.f90:  call reaint(iun,'iord',iord) 
propag_state.f90:  call reaflo(iun,'epms',epms) 
propag_state.f90:  call reaint(iun,'iork',iork) 
propag_state.f90:  call reaflo(iun,'eprk',eprk) 
propag_state.f90:  call reaint(iun,'lit1',lit1) 
propag_state.f90:  call reaint(iun,'lit2',lit2) 
propag_state.f90:  call reaint(iun,'imet',imet) 
propag_state.f90:  call reaint(iun,'iusci',iusci) 
propag_state.f90:  call reaint(iun,'icha',icha) 
propag_state.f90:  call reaint(iun,'ll',llev) 
propag_state.f90:     call legnum(isrk,isfl) 
propag_state.f90:     call compco(m+2,c_ms0,f_ms0,b_ms0,a_ms0)
propag_state.f90:        call sel_ste(ee,enne(j),error,mms,hh,step(j)) 
propag_state.f90:           CALL vawrxv(y1,y1(nvar2+1),stm0,21,6) 
propag_state.f90:           CALL invaxv(y1,y1(nvar2+1),21) 
propag_state.f90:     call ra15(y1,y1(nvar2+1),t1,t2,tcur,nvar2,nclass,idc) 
propag_state.f90:              CALL vawrxv(y1,y1(nvar2+1),stm,21,6) 
propag_state.f90:              CALL varunw(stmout,y1,y1(nvar2+1),6,21) 
propag_state.f90:              IF(min_dist) CALL str_clan(stm0,nd,dx0de) 
propag_state.f90:              CALL vawrxv(y1,y1(nvar2+1),stm,21,6) 
propag_state.f90:              CALL invaxv(y1,y1(nvar2+1),21)
propag_state.f90:              IF(min_dist) CALL str_clan(stm0,nd,dx0de)
propag_state.f90:           CALL force(y1,y1(nvar2+1),t1,delta(1,m+1),nvar2,idc,xxpla,0,1)
propag_state.f90:           CALL clocms(idc,t1,y1(1:3),y1(nvar2+1:nvar2+3),xxpla) 
propag_state.f90:           CALL forcesat(y1,y1(nvar2+1),t1,delta(1,m+1),nvar2,idc,xxpla,0,1)
propag_state.f90:           CALL force9(y1,y1(nvar2+1),t1,delta(1,m+1),nvar2,idc,xxpla,0,1) 
propag_state.f90:           CALL clocms9(idc,t1)
propag_state.f90:        call kintrp(ck1,ck,isrk,nvar) 
propag_state.f90:22   call rkimp(t1,h,y1,dery,ck,isrk,y2,lit,nvar,eprk,ep,lf,ndim)
propag_state.f90:!           call camrk(ep,npas,nrk,lf)
propag_state.f90:        CALL rkstep(ep,npas,nrk,lf,h) 
propag_state.f90:           CALL force(y1,y1(nvar2+1),t1,delta(1,m+1-npas),nvar2,idc,xxpla,0,1)
propag_state.f90:           CALL clocms(idc,t1,y1(1:3),y1(nvar2+1:nvar2+3),xxpla) 
propag_state.f90:           CALL forcesat(y1,y1(nvar2+1),t1,delta(1,m+1-npas),nvar2,idc,xxpla,0,1)
propag_state.f90:           CALL force9(y1,y1(nvar2+1),t1,delta(1,m+1-npas),nvar2,idc,xxpla,0,1) 
propag_state.f90:           CALL clocms9(idc,t1)
propag_state.f90:32    call bdnste(t1,y1,h,h2,nstep,m,j1,dd,delta,nvar2,nvar2x,nvar)
propag_state.f90:         CALL bdintrp(t1,h,tint,m,dd,delta,j1,nvar2,nvar2x,nvar,y2)
propag_state.f90:94       call rkimp(t1,tint,y1,dery,ck2,isrk,y2,lit,nvar,epin,ep,lf,ndim)
propag_state.f90:         CALL force(y1,y1(nvar2+1),tt,delta(1,kj2p),nvar2,idc,xxpla,0,1)
propag_state.f90:         CALL clocms(idc,tt,y1(1:3),y1(nvar2+1:nvar2+3),xxpla) 
propag_state.f90:         CALL forcesat(y1,y1(nvar2+1),tt,delta(1,kj2p),nvar2,idc,xxpla,0,1)
propag_state.f90:         CALL force9(y1,y1(nvar2+1),tt,delta(1,kj2p),nvar2,idc,xxpla,0,1) 
propag_state.f90:         CALL clocms9(idc,tt)
propag_state.f90:               CALL force(yc,yc(nvar2+1),tt,delta(1,kj2p),nvar2,idc,xxpla,1,1)
propag_state.f90:               CALL forcesat(yc,yc(nvar2+1),tt,delta(1,kj2p),nvar2,idc,xxpla,1,1)
propag_state.f90:               CALL force9(yc,yc(nvar2+1),tt,delta(1,kj2p),nvar2,idc,xxpla,1,1) 
propag_state.f90:   CALL compco_intrp()
propag_state.f90:         call mjddat(tcla,iday,imonth,iyear,hour) 
propag_state.f90:  call  zed(ecc,mms+2,z,econv,ila,igr) 
propag_state.f90:     CALL earcar(el0%t,xea,1)
propag_state.f90:  CALL coo_cha(el0,'CAR',elcar,fail_flag) 
ra15_mod.f90:      CALL radcon(ncl) 
ra15_mod.f90:         CALL force(x, v, tm+tini, f1,nv,idc,xpla,ips,imem)
ra15_mod.f90:         CALL forcesat(x, v, tm+tini, f1,nv,idc,xpla,ips,imem)
ra15_mod.f90:         CALL force9(x,v,tm+tini,f1,nv,idc,xpla,ips,imem) 
ra15_mod.f90:      CALL rabeta(nv,b,d,g) 
ra15_mod.f90:        CALL rasust(m,t,t2,tm,tini,x,v,b,f1,nv,ncl,npq,g,ep(m),nf) 
ra15_mod.f90:      CALL rapred(ncl,x,v,t,t2,f1,b,nv) 
ra15_mod.f90:         CALL force(x,v,tm+tini,f1,nv,idc,xpla,ips,imem)
ra15_mod.f90:         CALL forcesat(x,v,tm+tini,f1,nv,idc,xpla,ips,imem)
ra15_mod.f90:         CALL force9(x,v,tm+tini,f1,nv,idc,xpla,ips,imem)
ra15_mod.f90:            CALL cloapp(tm+tini,t,x,v,nv,idc,xpla,xldir,dir,nes,cloend) 
ra15_mod.f90:            CALL cloapp9(idc,tm+tini)
ra15_mod.f90:      CALL bintrp(q,b,e,bd,nv,ns) 
ra15_mod.f90:             CALL force(y,z,tm+s*t+tini,fj,nv,idc,xpla,ips,imem)
ra15_mod.f90:             CALL forcesat(y,z,tm+s*t+tini,fj,nv,idc,xpla,ips,imem)
ra15_mod.f90:             CALL force9(y,z,tm+s*t+tini,fj,nv,idc,xpla,ips,imem)
ret_analysistp.f90:    CALL  wriwarn(vas(lmin)%tcla,vas(lmin)%rindex,vas(lmin)%b, &
ret_analysistp.f90:       CALL lovmagn(rrrr,vvvv,h) ! vvvv is v_infty, replaced by current U 
ret_analysistp.f90:        CALL calendwri(tcl,calend)
ret_analysistp.f90:          CALL rmsp(riskfile,le) 
ret_analysistp.f90:       IF(iunrisk1.le.0) CALL header_risk(0)
ret_analysistp.f90:       CALL store_vi()
ret_analysistp.f90:       CALL risklarge(vas_tr(1:lre),lre,lmin,no_risk,t0,iunnew,iunwarn,RISKFILE=riskfile)
ret_analysistp.f90:                   CALL achillestp(vas_tr(1),siglim,type,        &
ret_analysistp.f90:                      CALL riskchecktp(va_tracemin,t0,type,no_risk,iunnew,iunwarn,iunrisk)
ret_analysistp.f90:                   CALL achillestp(vas_tr(lre),siglim,type,      &
ret_analysistp.f90:                      CALL riskchecktp(va_tracemin,t0,type,no_risk,iunnew,iunwarn,iunrisk)
ret_analysistp.f90:             CALL falslog4tp(vas_tr(j-1),iunwarn,type) 
ret_analysistp.f90:                   CALL findminctp(vas_tr(j-1),x1,x2,type,                  &
ret_analysistp.f90:                      CALL achillestp(vas_tr(j-1),siglim,     &
ret_analysistp.f90:                         CALL riskchecktp(va_tracemin,t0,type,no_risk,iunnew,iunwarn,iunrisk)
ret_analysistp.f90:                      CALL achillestp(vas_tr(j),siglim,type,iunwarn,iunnew,va_tracemin,    &
ret_analysistp.f90:                         CALL riskchecktp(va_tracemin,t0,type,no_risk,iunnew,iunwarn,iunrisk) 
ret_analysistp.f90:                      CALL riskchecktp(va_tracemin,t0,type,no_risk,iunnew,iunwarn,iunrisk)
ret_analysistp.f90:                         CALL achillestp(vas_tr(j-1),siglim,     &
ret_analysistp.f90:                               CALL riskchecktp(va_tracemin,t0,type,no_risk,iunnew,iunwarn,iunrisk) 
ret_analysistp.f90:                         CALL achillestp(vas_tr(j),siglim,        &
ret_analysistp.f90:                               CALL riskchecktp(va_tracemin,t0,type,no_risk,iunnew,iunwarn,iunrisk) 
ret_analysistp.f90:                      CALL achillestp(vas_tr(j-1),siglim,type,   &
ret_analysistp.f90:                      CALL achillestp(vas_tr(j),siglim,type,     &
ret_analysistp.f90:                      CALL riskchecktp(va_tracemin,t0,type,no_risk,iunnew,iunwarn,iunrisk)
ret_analysistp.f90:                   CALL achillestp(vas_tr(j-1),siglim,type,      &
ret_analysistp.f90:                      CALL riskchecktp(va_tracemin,t0,type,no_risk,iunnew,iunwarn,iunrisk)
ret_analysistp.f90:                   CALL achillestp(vas_tr(j),siglim,type,        &
ret_analysistp.f90:                      CALL riskchecktp(va_tracemin,t0,type,no_risk,iunnew,iunwarn,iunrisk)               
ret_analysistp.f90:                      CALL wriouttp(vas_tr(j-1),iunwarn) 
ret_analysistp.f90:                      CALL wriouttp(vas_tr(j),iunwarn) 
ret_analysistp.f90:       CALL risklarge(vas_tr(1:lre),lre,lmin,no_risk,t0,iunnew,iunwarn,RISKFILE=riskfile)
ret_analysistp.f90:                   CALL achillestp(vas_tr(1),siglim,typ,        &
ret_analysistp.f90:                      CALL riskchecktp(va_tracemin,t0,typ,no_risk,    &
ret_analysistp.f90:                   CALL achillestp(vas_tr(lre),siglim,typ,      &
ret_analysistp.f90:                      CALL riskchecktp(va_tracemin,t0,typ,no_risk,    &
ret_analysistp.f90:             CALL falslog4tp(vas_tr(j-1),iunwarn,typ) 
ret_analysistp.f90:                   CALL findminctp(vas_tr(j-1),x1,x2,typ,                  &
ret_analysistp.f90:                      CALL achillestp(vas_tr(j-1),siglim,     &
ret_analysistp.f90:                         CALL riskchecktp(va_tracemin,t0,typ,      &
ret_analysistp.f90:                      CALL achillestp(vas_tr(j),siglim,       &
ret_analysistp.f90:                         CALL riskchecktp(va_tracemin,t0,typ,      &
ret_analysistp.f90:                      CALL riskchecktp(va_tracemin,t0,typ,no_risk,    &
ret_analysistp.f90:                         CALL achillestp(vas_tr(j-1),siglim,     &
ret_analysistp.f90:        &                         CALL riskchecktp(va_tracemin,t0,typ, &
ret_analysistp.f90:                         CALL achillestp(vas_tr(j),siglim,        &
ret_analysistp.f90:        &                         CALL riskchecktp(va_tracemin,t0,typ, &
ret_analysistp.f90:                      CALL achillestp(vas_tr(j-1),siglim,typ,   &
ret_analysistp.f90:                      CALL achillestp(vas_tr(j),siglim,typ,     &
ret_analysistp.f90:                      CALL riskchecktp(va_tracemin,t0,typ,            &
ret_analysistp.f90:                   CALL achillestp(vas_tr(j-1),siglim,typ,      &
ret_analysistp.f90:                      CALL riskchecktp(va_tracemin,t0,typ,            &
ret_analysistp.f90:                   CALL achillestp(vas_tr(j),siglim,typ,        &
ret_analysistp.f90:                      CALL riskchecktp(va_tracemin,t0,typ,            &
ret_analysistp.f90:                      CALL wriouttp(vas_tr(j-1),iunwarn) 
ret_analysistp.f90:                      CALL wriouttp(vas_tr(j),iunwarn) 
ret_analysistp.f90:    TYPE(tp_point), DIMENSION(2) :: va2_trace       ! for call to findminctp 
ret_analysistp.f90:       CALL lovclosapptp(xx(nn+1),tc,tc,iunwar,fals_notp,ar(nn+1))
ret_analysistp.f90:          CALL  wriwarn(ar(nn+1)%tcla,ar(nn+1)%rindex,ar(nn+1)%b, &
ret_analysistp.f90:          CALL  wriwarn(ar(nn+1)%tcla,ar(nn+1)%rindex,ar(nn+1)%b, &
ret_analysistp.f90:             CALL  wriwarn(ar(nn+1)%tcla,ar(nn+1)%rindex,ar(nn+1)%b, &
ret_analysistp.f90:                   CALL falslog4tp(va2_trace,iunwar,type) 
ret_analysistp.f90:                      CALL findminctp(va2_trace,xx(nn),xx(nn+1),type,        &
ret_analysistp.f90:                   CALL falslog4tp(va2_trace,iunwar,type) 
ret_analysistp.f90:                      CALL findminctp(va2_trace,xx(nn+1),xx(nn),type,        &
ret_analysistp.f90:    CALL  wriwarn(ar(nn+1)%tcla,xx(nn+1),ar(nn+1)%b,ar(nn+1)%dd2_ds,         &
ret_analysistp.f90:    CALL  wriwarn(ar(nn+1)%tcla,xx(nn+1),ar(nn+1)%b,ar(nn+1)%dd2_ds,         &
ret_analysistp.f90: 11      CALL lovclosapptp(w(it+1),ta(it),tb(it),iunwar,          &
ret_analysistp.f90:            CALL wriwarn(tw(it),w(it),dw(it),fw(it),wstr(it),wwid(it),  &
ret_analysistp.f90:            CALL wriwarn(tw(it),w(it),dw(it),fw(it),wstr(it),wwid(it),  &
ret_analysistp.f90:               CALL wriwarn(tw(it+1),w(it+1),dw(it+1),fw(it+1),wstr(it+1),wwid(it+1),  &
ret_analysistp.f90:               CALL wriwarn(tw(it+1),w(it+1),dw(it+1),fw(it+1),wstr(it+1),wwid(it+1),  &
ret_analysistp.f90: !             CALL npoint_set(2**npset) ! try increasing npoint by a factor 2
ret_analysistp.f90:!            CALL arrloadtp(arrf(2),b(it+1)) 
ret_analysistp.f90:!            CALL arrloadtp(arrf(1),a(it+1)) 
ret_analysistp.f90:         CALL wriwarn(tw(it+1),w(it+1),dw(it+1),fw(it+1),wstr(it+1),    &
ret_analysistp.f90:         CALL falslog4tp(arrc,iunwar,type2) 
ret_analysistp.f90:            CALL wriwarn(tw(it+1),w(it+1),dw(it+1),fw(it+1),wstr(it+1), &
ret_analysistp.f90:      CALL wriwarn(tw(nit),w(nit),dw(nit),fw(nit),wstr(nit),wwid(nit),  &
ret_analysistp.f90:      CALL wriwarn(tw(nit),w(nit),dw(nit),fw(nit),wstr(nit),wwid(nit),  &
ret_analysistp.f90:  CALL lovinterp(rindex,deltasig,el0,unc0,falsok) 
ret_analysistp.f90:  CALL aftclo2v(ipla,el0%t,t1,t2,v_inf0,tbefore,tafter) 
ret_analysistp.f90:  CALL cov_avai(unc0,el0%coo,el0%coord) 
ret_analysistp.f90:  CALL pro_ele(el0,tafter,el,unc0,unc) 
ret_analysistp.f90:     CALL arrloadtp(va_tracemin,rindex)
ret_analysistp.f90:  CALL calendwri(vatr%tcla,calend) 
ret_analysistp.f90:  CALL calendwri(tw,calend) 
ret_analysistp.f90:     CALL header_new(iunwar)
ret_analysistp.f90:     CALL header_new(0)
ret_analysistp.f90:     CALL wriouttp(vas_traceloc(j),iunout) 
rmodel.f90:  CALL trange 
rmodel.f90:  CALL rotpn(roteqec,'EQUM','J2000',0.d0,'ECLM','J2000',0.d0) 
rmodel.f90:  CALL set_restart(.TRUE.) 
rmodel.f90:  CALL rdnlog('propag.','ab_mag',ab_mag,.true.,found,fail1,fail)
rmodel.f90:     CALL rdnint('propag.','ilun',ilun,.TRUE.,found,fail1,fail) 
rmodel.f90:     CALL rdnint('propag.','imerc',imerc,.TRUE.,found,fail1,fail) 
rmodel.f90:     CALL rdnint('propag.','iplut',iplut,.TRUE.,found,fail1,fail) 
rmodel.f90:     CALL rdnint('propag.','irel',irel,.TRUE.,found,fail1,fail) 
rmodel.f90:     CALL rdnint('propag.','iast',iast,.TRUE.,found,fail1,fail) 
rmodel.f90:     CALL rdncha('propag.','filbe',filbe,.TRUE.,found,fail1,fail) 
rmodel.f90:     CALL rmsp(filbe,ll) 
rmodel.f90:     CALL rdnlog('propag.','sep_viol',sep_viol,.true.,found,fail1,fail)
rmodel.f90:     CALL rdnrea('propag.','eta_sep',eta_sep,.true.,found,fail1,fail)
rmodel.f90:     CALL rdnint('propag.','idrp',idrp,.TRUE.,found,fail1,fail) 
rmodel.f90:     CALL rdnint('propag.','iyark',iyark,.TRUE.,found,fail1,fail) 
rmodel.f90:     CALL rdnint('propag.','iyarpt',iyarpt,.TRUE.,found,fail1,fail) 
rmodel.f90:     CALL rdncha('propag.','yardir',yardir,.TRUE.,found,fail1,fail) 
rmodel.f90:     CALL rdnrea('propag.','drpa2m',drpa2m,.TRUE.,found,fail1,fail)
rmodel.f90:     CALL rdnrea('propag.','A2',A2,.TRUE.,found,fail1,fail)
rmodel.f90:     CALL rdnrea('propag.','yark_exp',yark_exp,.TRUE.,found,fail1,fail)
rmodel.f90:     CALL rdnint('propag.','inongrav',inongrav,.TRUE.,found,fail1,fail)
rmodel.f90:     CALL rdnrea('propag.','a1ng',a1ng,.TRUE.,found,fail1,fail)
rmodel.f90:     CALL rdnrea('propag.','a2ng',a2ng,.TRUE.,found,fail1,fail)
rmodel.f90:     CALL rdnrea('propag.','a3ng',a3ng,.TRUE.,found,fail1,fail)
rmodel.f90:     CALL rdnrea('propag.','dtdelay',dtdelay,.TRUE.,found,fail1,fail)
rmodel.f90:       CALL rdnint('propag.','det_drp',det_drp,.TRUE.,found,fail1,fail) 
rmodel.f90:  CALL rdnint('propag.','iclap',iclap,.TRUE.,found,fail1,fail) 
rmodel.f90:     CALL rdnint('propag.','npoint',npoint,.TRUE.,found,fail1,fail) 
rmodel.f90:     CALL rdnrea('propag.','dmea',dmea,.TRUE.,found,fail1,fail) 
rmodel.f90:     CALL rdnrea('propag.','dmoon',dmoon,.TRUE.,found,fail1,fail) 
rmodel.f90:     CALL rdnrea('propag.','dmjup',dmjup,.TRUE.,found,fail1,fail) 
rmodel.f90:     CALL rdnrea('propag.','dmast',dmast,.TRUE.,found,fail1,fail) 
rmodel.f90:     CALL rdnrea('propag.','dter',dter,.TRUE.,found,fail1,fail) 
rmodel.f90:  CALL rdnint('propag.','iaber',iaber,.TRUE.,found,fail1,fail) 
rmodel.f90:  CALL rdnint('propag.','istat',istat,.TRUE.,found,fail1,fail) 
rmodel.f90:  CALL inipro 
rmodel.f90:  CALL difini 
rmodel.f90:  CALL rejini
rmodel.f90:  CALL rdnlog('propag.','output_des',output_des,.TRUE.,found,fail1,fail)
rmodel.f90:     CALL bizset(ecclim,samin,samax,phmin,ahmax,qmax)
rmodel.f90:  CALL cov_not_av 
rms_twobody.f90:  CALL coo_cha(el,'CAR',elcar,fail_flag)
rms_twobody.f90:     CALL fser_propag(elcar%coord(1:3), elcar%coord(4:6), elcar%t, obs(k)%time_tdt,gms,xeq,veq)
rms_twobody.f90:     CALL earcar(obs(k)%time_tdt,xea,1)
rms_twobody.f90:     CALL aber1(xrel,vast,xrel)
rms_twobody.f90:        CALL polar(xrel,alphac,deltac,rrel) 
runge_kutta_gauss.f90:        call fct(t(j),y3,dery,nvar,ips,imem) 
runge_kutta_gauss.f90:     call force(y,y(nvar2+1),t,dery(nvar2+1),nvar2,idc,xxpla,ips,imem)
runge_kutta_gauss.f90:     call forcesat(y,y(nvar2+1),t,dery(nvar2+1),nvar2,idc,xxpla,ips,imem)
runge_kutta_gauss.f90:     CALL force9(y,y(nvar2+1),t,dery(nvar2+1),nvar2,idc,xxpla,ips,imem)
runge_kutta_gauss.f90:      call filopl(iun,'rk.coe') 
runge_kutta_gauss.f90:  199 call filclo(iun,' ') 
runge_kutta_gauss.f90:        CALL fctcl(t(j),yat,dery,nvar,xplat,ips,imem) 
runge_kutta_gauss.f90:   77 CALL fctcl(t1+h,yat,dery,nvar,xplat,0,1) 
runge_kutta_gauss.f90:         call force(y,y(nvar2+1),t,dery(nvar2+1),nvar2,idc,xxpla,ips,imem) 
runge_kutta_gauss.f90:         call forcesat(y,y(nvar2+1),t,dery(nvar2+1),nvar2,idc,xxpla,ips,imem) 
runge_kutta_gauss.f90:          CALL force9(y,y(nvar2+1),t,dery(nvar2+1),nvar2,idc,xxpla,ips,imem)
semi_linear.f90:     CALL elemov(x,y,v,ceicel,elm(1,nn)) 
semi_linear.f90:  dadde=TRANSPOSE(daddet) ! CALL transp(daddet,6,2,dadde) 
semi_linear.f90:  tmp26=MATMUL(dadde,gamm0)  ! CALL mulmat(dadde,2,6,gamm0,6,6,tmp26) 
semi_linear.f90:  gamad=MATMUL(tmp26,daddet) ! CALL mulmat(tmp26,2,6,daddet,6,2,gamad) 
semi_linear.f90:  CALL rs(2,2,gamad,eigval,1,axes,fv1,fv2,ierr) 
semi_linear.f90:  CALL rs(4,4,gamad,eigval,1,axes,fv1,fv2,ierr) 
semi_linear.f90:  del=x*v(1:6,1)+y*v(1:6,2) ! CALL lincog(6,v(1,1),x,v(1,2),y,del) 
semi_linear.f90:  dee=-x*ceicel(1:4,1)-y*ceicel(1:4,2) ! CALL lincog(4,ceicel(1,1),-x,ceicel(1,2),-y,dee) 
semi_linear.f90:  deel=MATMUL(v(1:6,3:6),dee) ! CALL mulmav(v(1,3),6,4,dee,4,deel) 
semi_linear.f90:  del=del+deel ! CALL vsumg(6,del,deel,del) 
semi_linear.f90:  CALL graha(dtpdet,6,v) 
semi_linear.f90:  vt=TRANSPOSE(v) ! CALL transp(v,6,6,vt) 
semi_linear.f90:  tmp=MATMUL(vt,gc) ! CALL mulmat(vt,6,6,gc,6,6,tmp) 
semi_linear.f90:  gamv=MATMUL(tmp,v) ! CALL mulmat(tmp,6,6,v,6,6,gamv) 
semi_linear.f90:  tmp=MATMUL(vt,cc)  ! CALL mulmat(vt,6,6,cc,6,6,tmp) 
semi_linear.f90:  cv=MATMUL(tmp,v)   ! CALL mulmat(tmp,6,6,v,6,6,cv) 
semi_linear.f90:  CALL tchinv(c4,4,cinv,ws,ierr) 
semi_linear.f90:  ceicel=MATMUL(cinv,c42) ! CALL mulmat(cinv,4,4,c42,4,2,ceicel) 
semi_linear.f90:  CALL inv22(a,b,deta) 
semi_linear.f90:  call versor(n,a(1:n,1),epsi,v(1:n,1),vl,ize) 
semi_linear.f90:  v(1:n,2)=a(1:n,2)+cc*v(1:n,1) ! call lincog(n,a(1,2),1.d0,v(1,1),cc,v(1,2)) 
semi_linear.f90:  call versor(n,v(1:n,2),epsi,v(1:n,2),vl,ize) 
semi_linear.f90:     call versor(n,ws,epsi,v(1:n,3+jok),vl,ize) 
semi_linear.f90:            ! call lincog(n,v(1,3+jok),1.d0,v(1,2+jj),cc,v(1,3+jok)) 
semi_linear.f90:           call versor(n,v(1:n,3+jok),epsi,v(1:n,3+jok),vl,ize) 
semi_linear.f90:  CALL  alph_del2 (el0,t1,idsta,obs4,1,6,dobde,   &
semi_linear.f90:  CALL tchinv(c4,4,g4,ws,indp) 
semi_linear.f90:  CALL ellip4(daddelt4,g4,sig,axes,gamad) 
semi_linear.f90:  CALL slinel4(daddelt4,g4,c4,ceicel,b,v) 
semi_linear.f90:  CALL linobs4(ibv,npo,el0%coord,axes,sig,b,v,sigma,ceicel,elm,v6,npo1) 
semi_linear.f90:        elm(1:6,n)=el0%coord+elm(1:6,n) ! CALL vsumg(6,eq,elm(1,n),elm(1,n)) 
semi_linear.f90:!           CALL alfdel (elm(1,n),t0,t1,idsta,al(n),de(n),               &
semi_linear.f90:        CALL  alph_del2 (els,t1,idsta,obs4,0,6,dobde,   &
semi_linear.f90:        CALL angupd(al(n),al(n-1),ng) 
semi_linear.f90:             ! CALL lincog(2,axes(1,1),xa,axes(1,2),yd,alde) 
semi_linear.f90:        CALL elemo4(x,y,v,ceicel,elm4) 
semi_linear.f90:            ! CALL mulmav(v6(1,3),6,4,elm4,4,elm(1,nn)) 
semi_linear.f90:      dadde=TRANSPOSE(daddet) ! CALL transp(daddet,4,2,dadde) 
semi_linear.f90:      tmp24=MATMUL(dadde,gamm0) ! CALL mulmat(dadde,2,4,gamm0,4,4,tmp24) 
semi_linear.f90:      gamad=MATMUL(tmp24,daddet) ! CALL mulmat(tmp24,2,4,daddet,4,2,gamad) 
semi_linear.f90:      CALL rs(2,2,gamad,eigval,1,axes,fv1,fv2,ierr) 
semi_linear.f90:      del=x*v(1:4,1)+y*v(1:4,2) ! CALL lincog(4,v(1,1),x,v(1,2),y,del) 
semi_linear.f90:      dee=-x*ceicel(1:2,1)-y*ceicel(1:2,2) ! CALL lincog(2,ceicel(1,1),-x,ceicel(1,2),-y,dee) 
semi_linear.f90:      deel=MATMUL(v(1:4,3:4),dee) ! CALL mulmav(v(1,3),4,2,dee,2,deel) 
semi_linear.f90:      del=del+deel ! CALL vsumg(4,del,deel,del) 
semi_linear.f90:      CALL graha(dtpdet,ndim,v) 
semi_linear.f90:!     CALL mulmat(vt,ndim,ndim,gc,ndim,ndim,tmp)                        
semi_linear.f90:!     CALL mulmat(tmp,ndim,ndim,v,ndim,ndim,gamv)                       
semi_linear.f90:      tmp=MATMUL(vt,cc) ! CALL mulmat(vt,ndim,ndim,cc,ndim,ndim,tmp) 
semi_linear.f90:      cv=MATMUL(tmp,v) ! CALL mulmat(tmp,ndim,ndim,v,ndim,ndim,cv) 
semi_linear.f90:      CALL tchinv(c4,ndimm2,cinv,ws,ierr) 
semi_linear.f90:      ceicel=MATMUL(cinv,c42) ! CALL mulmat(cinv,ndimm2,ndimm2,c42,ndimm2,2,ceicel) 
semi_linear.f90:      CALL inv22(a,b,deta) 
shower_analysistp.f90:  CALL sort_time2(tclo,vas_trace,no) 
shower_analysistp.f90:     CALL sort_index2(tclo,vas_trace,no,isho(js),lsho) 
shower_analysistp.f90:    CALL heapsort (t,no,ipo)                                
shower_analysistp.f90:    CALL heapsorti(i(isho),lsho,ipo)               
solvpoly.f90:   CALL polzeros(pdeg,poly(numzerosol:poldg-numzerocoe),epsm,big,small, &
spher_harm.f90:    call rmsp(modelfile,lll) 
spher_harm.f90:    CALL filopn(iun,modelfile(1:lll)//'.coe','old') 
spher_harm.f90:2    CALL filclo(iun,' ')
spher_harm.f90:    call legit(sf,cf,sl,cl,p,pt,s,c,ii,ites)                           
test_moid_rms.f90:  CALL compop
test_moid_rms.f90:  CALL rmsp(run,ler)
test_moid_rms.f90:  CALL filopn(ierrou,run(1:ler)//'.err','unknown')
test_moid_rms.f90:     CALL filnam(eledir,name,'eq1',elefil,le) 
test_moid_rms.f90:     CALL read_elems(elem2,name,eof,elefil,COVAR=unc2)
test_moid_rms.f90:     CALL undefined_orb_uncert(6,unc1)
test_moid_rms.f90:     CALL earth(elem2%t,elem1%coord)
test_moid_rms.f90:     CALL dmintil_rms(elem1,elem2,nummin,dmintil,car1min,car2min,&
test_moid_rms.f90:!     CALL dmintil_rms(elem1,elem2,nummin,dmintil)
test_moid_rms.f90:  CALL filclo(ierrou,' ')
test_moid_rms.f90:    CALL initopt(progna,run,'mop')  
test_moid_rms.f90:    CALL rmodel(1)    
test_moid_rms.f90:    CALL rmsp(file,le) 
test_moid_rms.f90:    call filopn(iunout,file(1:le),'UNKNOWN') 
test_moid_rms.f90:    CALL input_cha_opt(progna,'eledir',eledir,ireq,found,comment,iunout)
test_moid_rms.f90:    CALL input_log_opt(progna,'chk_der',chk_der,ireq,found,comment,iunout)
tp_trace.f90:    CALL undefined_orb_uncert(nd,tpp%unc_opik)
tp_trace.f90:       call mjddat(tcla(jc),iday,imonth,iyear,hour) 
tp_trace.f90:         CALL undefined_tp_point(nd,tp)
tp_trace.f90:            CALL varwra(y2,dxdx1,nd,nv*2,nv) 
tp_trace.f90:            CALL convertcovdp(nd,unc_store%g(1:nd,1:nd),dee,tp%unc_opik%g(1:nd,1:nd))
tp_trace.f90:            CALL convertnordp(nd,unc_store%c(1:nd,1:nd),dee,tp%unc_opik%c(1:nd,1:nd))
tp_trace.f90:!            CALL rs(2,2,tp%unc_opik%g(4:5,4:5),eigval,1,axes,fv1,fv2,ierr) 
tp_trace.f90:            CALL rs(2,2,tmp22,eigval,1,axes,fv1,fv2,ierr) 
tp_trace.f90:            CALL weak_dir(unc_store%g(1:nd,1:nd),wdir(1:nd),sdir,-1,coo_store,coord_store,units(1:nd),nd)
tp_trace.f90:         CALL prvec(rop(1,1:3),rop(2,1:3),rop(3,1:3))
tp_trace.f90:         CALL prvec(rr(1,1:3),rr(2,1:3),rr(3,1:3))
tp_trace.f90:!         CALL rotmt(-tp%phi,r1,2)
tp_trace.f90:!         CALL rotmt(-tp%theta,r2,1)
tp_trace.f90:         CALL wri_tppoint(tp,iuncla,covava)
tp_trace.f90:            CALL mtp_ref(tpno,v2,v3(1,1),vt3(1,1)) 
tp_trace.f90:            xx=MATMUL(vt3(1:3,1:3),xcla(1:3,jc)) ! CALL mulmav (vt3,3,3,xcla(1:3,jc),3,xx) 
tp_trace.f90:            call mjddat(tcla(jc),iday,imonth,iyear,hour) 
tp_trace.f90:            CALL varwra(y2,dxdx1,nd,nv*2,nv) 
tp_trace.f90:            CALL mtp_ref(tpno,v2,v3,vt3) 
tp_trace.f90:!           CALL mtpref(tpno,xplaj(4,jc),v3,vt3)                        
tp_trace.f90:            CALL mtp_rot3(.true.,vt3,xcla(1,jc),vcla(1,jc),dxde, &
tp_trace.f90:            CALL weak_dir(unc_store%g(1:nd,1:nd),wdir,sdir,-1,coo_store,coord_store,units,nd)
tp_trace.f90:            CALL wri_clan(iuncla,planam(1:lpla),tcla(jc),xcla(1,jc),    &
tp_trace.f90:!     CALL force(xhel,vhel,tcla,f,3,idc,xxpla,0,10)                     
tp_trace.f90:      CALL marg_2(gmtp,gxz,svv,cxv,czv) 
tp_trace.f90:      CALL rs(2,2,gxz,eigval,1,axes,fv1,fv2,ierr) 
tp_trace.f90:      call mjddat(tcla,iday,imonth,iyear,hour) 
tp_trace.f90:     CALL mjddat(tp%tcla,iday,imonth,iyear,hour) 
tp_trace.f90:     CALL undefined_tp_point(6,tp)
tp_trace.f90:     CALL rmsp(reqpla,le) 
tp_trace.f90:           CALL rea_tppoint(va_trace,iunclo,.true.) 
tp_trace.f90:           CALL rmsp(planam,le1) 
tp_trace.f90:           CALL rea_tppoint(va_trace,iunclo,.true.)
tp_trace.f90:    CALL rea_clorectp(iunclo,curpla,imulcur,va_trace,planam,error,eof) 
tp_trace.f90:       CALL rescaltp(va_trace)
tp_trace.f90:    CALL rescaltp(va_tp) 
tp_trace.f90:    CALL min_poss3tp(va_tp)
tp_trace.f90:      CALL rmsp(reqpla,le) 
tp_trace.f90:            CALL rea_clan(record,va_trace,error) 
tp_trace.f90:            CALL rmsp(planam,le1) 
tp_trace.f90:            CALL rea_clan(record,va_trace,error) 
tp_trace.f90:  CALL coo_cha(el0,'EQU',eleq,fail_flag)
virtual_impactor.f90:    CALL coo_cha(curr_vi%ele,'KEP',elkep,fail_flag,dee)
virtual_impactor.f90:    CALL convertunc(curr_vi%unc,dee,unckep)
virtual_impactor.f90:          CALL aftclov(tp_curr%iplam,elkep%t,tp_curr%tcla,v_infi,tbefore,tafter) 
virtual_impactor.f90:          CALL cov_avai(unckep,elkep%coo,elkep%coord) 
virtual_impactor.f90:          CALL pro_ele(elcor,tafter,el1,unckep,unc1)
virtual_impactor.f90:          CALL arrloadtp(tp_curr,rindex) 
yark_pert.f90:  CALL prvec(x,v,angm)
yark_pert.f90:        CALL prvec(x,v,ang_mom)
yark_pert.f90:  call coo_cha(elem,'KEP',elekep,fail_flag)
yark_pert.f90:  CALL filnam(yardir,astnam,'yar',file,le) 
yark_pert.f90:     call filopn(unit,file(1:le),'old') 
yark_pert.f90:     call filclo(unit,' ') 
