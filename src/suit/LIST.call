admis_reg.f90:       CALL earcar(tc,xea,1) ! earth coord, heliocentric ecliptic
admis_reg.f90:     CALL statcode(idsta_s,idsta_i) 
admis_reg.f90:!    CALL pvobs(tc,idsta_i,xoec,voec) ! obs. coord, geocentric ecliptic 
admis_reg.f90:    CALL observer_position(tc,xoec,voec,idsta_i)
admis_reg.f90:!       call solv6(a0,roots0,nroots0,radius0)
admis_reg.f90:       call find_pos_roots(6,a,tmproots,nroots,hzflag,multfl)
admis_reg.f90:!       call solv6(a,roots,nroots,radius)
admis_reg.f90:       call find_pos_roots(8,b,rootsd,nrootsd,hzflagd,multfld)
admis_reg.f90:!       call solv8(b,rootsd,nrootsd,radiusd)
admis_reg.f90:    CALL heapsort(roots(1:nroots),nroots,indsrt(1:nroots))
admis_reg.f90:       CALL heapsort(rootsd(1:nrootsd),nrootsd,inddsrt(1:nrootsd))
admis_reg.f90:   CALL polzeros(pdeg,poly(numzerosol:poldeg-numzerocoe),epsm,big,small, &
angle_var.f90:  CALL stspli(untim,'/',unang,nospli) 
angle_var.f90:  CALL locase(unang) 
angle_var.f90:  CALL locase(untim)           
astrometric_observations.f90:   CALL filopn(unit,file,'UNKNOWN')
astrometric_observations.f90:   CALL write_rwo_header(unit, error_model, nrec, rms0, rmsmag0)
astrometric_observations.f90:   CALL heapsort(obs(1:n)%time_tdt,n,time_ord) !default is to sort
astrometric_observations.f90:         CALL write_rwo_opt(unit,obs(i),obsw(i),error,nrec)
astrometric_observations.f90:             CALL write_rwo_pos(unit,obs(i),obsw(i))
astrometric_observations.f90:         CALL write_rwo_rad(unit,obs(i), obsw(i))
astrometric_observations.f90:     CALL mjddat(obs%time_utc,iday,month,year,hour)
astrometric_observations.f90:  CALL mjddat(obs%time_utc,iday,month,year,hour)
astrometric_observations.f90:  CALL real2string(day,2,nd2,sday,error)
astrometric_observations.f90:  CALL sessag(obs%coord(1)*hrad,ra_sign,ra_h,ra_min,ra_sec)
astrometric_observations.f90:  CALL sessag(obs%coord(2)*degrad,dec_sign,dec_deg,dec_min,dec_sec)
astrometric_observations.f90:  CALL mjddat(obs%time_utc,iday,month,year,hour)
astrometric_observations.f90:  CALL real2string(day,2,nd2,sday,error)
astrometric_observations.f90:!         CALL rotpn(rot,'ECLM','J2000',0.d0,'EQUM','J2000',0.d0)
astrometric_observations.f90:     CALL filopn(unit,file,'OLD')
astrometric_observations.f90:     CALL rdfnam(unit,file,nr)
astrometric_observations.f90:     CALL read_rwo_header(unit, error_model, error, nr, rms, rmsmag)
astrometric_observations.f90:        CALL read_rwo_rec(unit,nr,obs1,obsw1,error,eof)
astrometric_observations.f90:     CALL cnvtim(mjd,sec,scale,mjdt,sect,'TDT')
astrometric_observations.f90:     CALL statcode(obs1%obscod_s,obs1%obscod_i)
astrometric_observations.f90:     CALL rmsp(mag_field,len_mag_field)
astrometric_observations.f90:           CALL geodetic_to_cartesian(geopos(1),geopos(2),geopos(3),bfpos0)
astrometric_observations.f90:           CALL observer_position(obs1%time_tdt,obs1%obspos,obs1%obsvel,BFPOS=bfpos0)
astrometric_observations.f90:           CALL observer_position(obs1%time_tdt,obs1%obspos,obs1%obsvel,OBSCODE=obs1%obscod_i)
astrometric_observations.f90:     CALL cnvtim(mjd,sec,scale,mjdt,sect,'TDT')
astrometric_observations.f90:     CALL statcode(obs1%obscod_s(1:3),code_tx)
astrometric_observations.f90:     CALL statcode(obs1%obscod_s(5:7),code_rx)
astrometric_observations.f90:     CALL obscoo(code_tx,obs1%obspos,stname)
astrometric_observations.f90:     CALL obscoo(code_rx,obs1%obsvel,stname)
astrometric_observations.f90:  CALL rdfint(unit,'version',.false.,version,found,kr)
astrometric_observations.f90:  CALL rdfcha(unit,'errmod',.false.,error_model,found,kr)
astrometric_observations.f90:     CALL rdfrea(unit,'RMSast',.false.,rms,found,kr)
astrometric_observations.f90:     CALL rdfrea(unit,'RMSmag',.false.,rmsmag,found,kr)
astrometric_observations.f90:   CALL filopn(iunit,filnam,'old')
astrometric_observations.f90:      CALL mpcrec_transform(mpcrec,obs(nobs),complete,error,skip_rad,ons_mode)
astrometric_observations.f90:      CALL mpcrec_transform(mpcrec,obs(nobs),complete,error,skip_rad)
astrometric_observations.f90:      CALL mpcrec_add_obspos(obs(nobs),error)
astrometric_observations.f90:            CALL mpcrec_add_obspos(obs(nobs),error,mpcrec,mpcrec2)
astrometric_observations.f90:            CALL mpcrec_add_obspos(obs(nobs),error,mpcrec,mpcrec2)
astrometric_observations.f90:   CALL filclo(iunit,' ')
astrometric_observations.f90:   CALL rmsp(obs%objdes,le)
astrometric_observations.f90:   CALL iaucod(mpcrec(1:12),obs%objdes,err_tmp)
astrometric_observations.f90:         CALL rmsp(altstr,le)
astrometric_observations.f90:         CALL geodetic_to_cartesian(longitude,latitude,altitude,bfpos0)
astrometric_observations.f90:         CALL observer_position(obs%time_tdt,obs%obspos,obs%obsvel,BFPOS=bfpos0)
astrometric_observations.f90:         CALL observer_position(obs%time_tdt,obs%obspos,obs%obsvel,OBSCODE=obs%obscod_i)
astrometric_observations.f90:!      CALL rotpn(rot,'EQUM','J2000',0.d0,'ECLM','J2000',0.d0)
astrometric_observations.f90:      CALL observer_position(obs%time_tdt,obs%obspos,obs%obsvel,OBSCODE=obs%obscod_i,PRECISION=2)
astrometric_observations.f90:  call filopn(unit,file,'old')
astrometric_observations.f90:     CALL jplradar_transform(rec,obs(i),error)
astrometric_observations.f90:        call filclo(unit,' ')
astrometric_observations.f90:   call filclo(unit,' ')
astrometric_observations.f90:      call rmsp(number,lnum)
astrometric_observations.f90:      call rmsp(nametmp,lnam)
astrometric_observations.f90:      CALL cnvtim(mjd,sec,scale,mjdt,sect,'TDT')
astrometric_observations.f90:      CALL codestat(iotr,code_trx)
astrometric_observations.f90:      CALL codestat(iore,code_rcx)
astrometric_observations.f90:      CALL obscoo(iotr,obs%obspos,stname)
astrometric_observations.f90:      CALL obscoo(iore,obs%obsvel,stname)
astrometric_observations.f90:      CALL mpc_obs_input(mpc,obs,m,FILNAM=file(1:lfile)//'.obs')
astrometric_observations.f90:      CALL jpl_radarobs(rad,file(1:lfile)//'.rad',obs(m+1:),mr)
astrometric_observations.f90:   CALL observ_rms(obs,error_model,init,obsw,m)
astrometric_observations.f90:   CALL write_rwo(file(1:lfile)//'.rwo',obs,obsw,m,error_model)
astrometric_observations.f90:      CALL mpc_obs_input(mpc,obs,m,FILNAM=file(1:lfile)//'.obs')
astrometric_observations.f90:      CALL jpl_radarobs(rad,file(1:lfile)//'.rad',obs(m+1:),mr)
astrometric_observations.f90:   CALL observ_rms(obs,error_model,init,obsw,m)
astrometric_observations.f90:!  CALL read_rwo_trans(file(1:lfile)//'.rwo',obst,obswt,mt,error_modelt,rms,rmsmag)
astrometric_observations.f90:   CALL read_rwo(file(1:lfile)//'.rwo',obst,obswt,mt,error_modelt,rms,rmsmag)
astrometric_observations.f90:      CALL observ_rms(obst,error_model,init,obswt,mt)
astrometric_observations.f90:   CALL addobs_rwo(obs,obsw,m,obst,obswt,mt,change)
astrometric_observations.f90:      CALL write_rwo(file(1:lfile)//'.rwo',obs,obsw,m,error_model)
astrometric_observations.f90:   CALL read_rwo(file(1:lfile)//'.rwo',obs,obsw,m,error_modelt,rms,rmsmag)
astrometric_observations.f90:      CALL observ_rms(obs,error_model,init,obsw,m)
astrometric_observations.f90:      CALL mpc_obs_input(mpc,obst,mt,FILNAM=file(1:lfile)//'.obs')
astrometric_observations.f90:      CALL jpl_radarobs(rad,file(1:lfile)//'.rad',obst(mt+1:),mr)
astrometric_observations.f90:      CALL observ_rms(obst,error_model,init,obswt,mt)
astrometric_observations.f90:      CALL addobs_mpc(obs,obsw,m,obst,obswt,mt,mnew,change)
astrometric_observations.f90:         CALL write_rwo(file(1:lfile)//'.rwo',obs,obsw,mnew,error_model)
astrometric_observations.f90:     call filopl(unit,'astorb.rad')
astrometric_observations.f90:     call rmsp(oid,ln)
astrometric_observations.f90:     call rmsp(number,lnum)
astrometric_observations.f90:     call rmsp(name,lnam)
astrometric_observations.f90:109 call filclo(unit,' ')
astrometric_observations.f90:  CALL norstr(c1,l)
astrometric_observations.f90:     CALL norstr(c,l)
astrometric_observations.f90:     CALL norstr(c,l)
astrometric_observations.f90:     CALL stspli(c,' ',field,nospli)
astrometric_observations.f90:        CALL norstr(field,ll)
astrometric_observations.f90:    CALL filopl(unit,'weights/cbm10.sta')
astrometric_observations.f90: 98 CALL filclo(unit,' ')
astrometric_observations.f90:    CALL heapsortnachlo(obscodrms,nstarms,3,qq,indstarms)
astrometric_observations.f90:    CALL filopl(unit,'weights/cbm10.rules')
astrometric_observations.f90:99  CALL filclo(unit,' ')
astrometric_observations.f90:    CALL heapsortnachlo(obscatcod,nrules,4,q,indrules)
astrometric_observations.f90:       CALL astrow_bias_cbm(error_model,obs(i),obsw(i))
astrometric_observations.f90:       CALL astrow_nobias(error_model,obs(i),obsw(i))
astrometric_observations.f90:  CALL cat_find(obs%catcodmpc,tdt,observ,catcode)
astrometric_observations.f90:  CALL cat_bias(obs%coord(1),obs%coord(2),catcode,bias_ra,bias_dec,biasflag)
astrometric_observations.f90:     CALL bin_search(observ,nstarms,obscodrms,indstarms,indobs)
astrometric_observations.f90:        CALL bin_search(obscat,nrules,obscatcod,indrules,indobs)
astrometric_observations.f90:           CALL bin_search(obscat,nrules,obscatcod,indrules,indobs)
astrometric_observations.f90:     CALL bin_search(observ,nstarms,obscodrms,indstarms,indobs)
astrometric_observations.f90:        CALL bin_search(obscat,nrules,obscatcod,indrules,indobs)
astrometric_observations.f90:           CALL bin_search(obscat,nrules,obscatcod,indrules,indobs)
attributable.f90:  CALL cnvtim(mjd1,sec1,'TDT',mjd2,sec2,'UTC')
attributable.f90:  CALL mjddat(att%tdtobs,iday,month,yearm,hour) 
attributable.f90:  CALL quadratic_fit(t,delta,rmsd,m,ntime,g2d,g3d,s2d,s3d,   &
attributable.f90:  CALL quadratic_fit(t,alr,rmsa,m,ntime,g2a,g3a,s2a,s3a,   &
attributable.f90:     CALL covar_curvacc(att%eta,att%angles(1),att%angles(2),att%angles(3), &
attributable.f90:           CALL observer_position(obs(j)%time_tdt,position,velocity,obs(j)%obscod_i)
attributable.f90:              CALL prodmv(dx(1:3,j),roteceq,position)                
attributable.f90:           CALL quadratic_fit(t,dx(j,1:m),rmsa,m,ntime,g2a,g3a,s2a,s3a,rms_2a,rms_3a,ising)
attributable.f90:    CALL prvec(x1,x2,xx)
cat_debias.f90:    CALL filopl(iun,'xcat.bias')
cat_debias.f90:       CALL cat_bias_init
cat_debias.f90:    CALL ang2pix_ring(nside, theta, phi, ipring)
cat_debias.f90:    if (nside<1 .or. nside>ns_max) call fatal_error ("nside out of range")
cat_debias.f90:       call fatal_error
cat_debias.f90:!    call exit_with_status(1)
cat_debias.f90:    call exit_with_status(1)
cat_debias.f90:    call exit_with_status(1)
cat_debias.f90:!    call exit_ (code)
cat_debias.f90:!    call exit (code)
char_str.f90:  CALL chkpdf(l,lchx,'lchx') 
char_str.f90:  CALL chkpdf(l,lchx,'lchx') 
char_str.f90:  CALL chkpdf(LEN(c),lchx,'lchx') 
char_str.f90:  CALL norstr(c1,lc) 
char_str.f90:  CALL stspli(c,',',item1,nospli) 
char_str.f90:  CALL rmsp(nam0,le) 
char_str.f90:     CALL rmsp(namp,le1) 
chebi_pol.f90:      CALL chebym(t(k),ngr,poly) 
chebi_pol.f90:      CALL tchol(covc,lgintx+1,ngr+1,indp,eps) 
chebi_pol.f90:      CALL inver(covc,v,lgintx+1,ngr+1) 
chebi_pol.f90:      CALL chebym(t(k),ngr,poly) 
chebi_pol.f90:          CALL lgnint(x(ksip,i),tn,nl+1,nl,coef(0,kip,i),sigma) 
chebi_pol.f90:      CALL chebyd(tin,nl,ntder,pol,pold,poldd) 
chebi_pol.f90:              CALL lgnint(x(ksis,i),tn,nl+1,nl,coef(0,kis,i),sigma) 
chebi_pol.f90:          CALL chebyd(tin,nl,ntder,pol,pold,poldd) 
chebi_pol.f90:          CALL smoocn(fc,c1,c1d,c1dd,nsmord) 
chebi_pol.f90:          CALL matin(a,det,nd1,1,nd1x,ising,0) 
delaunay_triang.f90:           CALL nuovotriangolo2(triangnew,segnew3,&
delaunay_triang.f90:           CALL verificaint(npox,ntrix,triang,nt,xR,yR,intersez,xcentro,&
delaunay_triang.f90:              CALL nuovotriangolo(triangnew,segnew3,&
delaunay_triang.f90:     CALL cercatriangolivicini(npox,ntrix,triang,nt,i,quantivicini,  &
delaunay_triang.f90:           CALL listaswap(npox,ntrix,triang,xR,yR,xcirccentr,            &
delaunay_triang.f90:           CALL swappalista(npox,ntrix,triang,xR,yR,xcirccentr,seg,      &
delaunay_triang.f90:        CALL nuovotriangolo(triangnew,segnew3,      &
delaunay_triang.f90:        CALL cercatriangolivicini(npox,ntrix,triang,nt,nt,quantivicini, &
delaunay_triang.f90:              CALL listaswap(npox,ntrix,triang,xR,yR,xcirccentr, &
delaunay_triang.f90:              CALL swappalista(npox,ntrix,triang,xR,yR,xcirccentr,seg, &
delaunay_triang.f90:  CALL smoothing(npox,ntrix,eps1,nodiest,noditot,nt,seg,xR,yR,density,triang)
delaunay_triang.f90:900 CALL cercatriangolivicini(npox,ntrix,triangnew,nt,cambia(1),quantivicini, &
delaunay_triang.f90:                    CALL nuovotriangolo2(triangnew4,segnew4, &
delaunay_triang.f90:                    CALL nuovotriangolo2(triangnew4,segnew5, &
delaunay_triang.f90:     CALL nuovotriangolo(triangnew4,segnew5,xRnew(triangnew4(1)), &
delaunay_triang.f90:  INTEGER :: segnew(3,2) !only for CALL od nuovotriangolo, not needed here
delaunay_triang.f90:        CALL cercanodivicini(npox,ntrix,l,seg,xR,yR,density,nt)
delaunay_triang.f90:        CALL cercanodivicini(npox,ntrix,l,seg,xR,yR,density,nt)
delaunay_triang.f90:     CALL nuovotriangolo(triangnew,segnew, &
delaunay_triang.f90:     CALL cercatriangolivicini(npox,ntrix,triang,nt,i,quantivicini, &
delaunay_triang.f90:           CALL listaswap(npox,ntrix,triang,xR,yR,xcirccentr, &
delaunay_triang.f90:           CALL swappalista(npox,ntrix,triang,xR,yR,xcirccentr,seg, &
delaunay_triang.f90:  CALL filopn(iun,trifil,'unknown')  
delaunay_triang.f90:  CALL filclo(iun,' ')
delaunay_triang.f90:  CALL filopn(iun,trifil,'old')  
delaunay_triang.f90:  CALL filclo(iun,' ')
eigen_val.f90:      call  tred1(nm,n,a,w,fv1,fv2) 
eigen_val.f90:      call  tqlrat(n,w,fv2,ierr) 
eigen_val.f90:   20 call  tred2(nm,n,a,w,fv1,z) 
eigen_val.f90:      call  tql2(nm,n,w,fv1,z,ierr) 
ever_pitkin.f90:    CALL solve_kepuniv2(dt,r0,sig0,mu,alpha,ecc,psi,s0,s1,s2,s3)
ever_pitkin.f90:    CALL solve_kepuniv2(dt,r0,sig0,mu,alpha,ecc,psi,s0,s1,s2,s3)
ever_pitkin.f90:    CALL eye(3,unit3)
ever_pitkin.f90:      CALL s_funct(psi,alpha,s0,s1,s2,s3)
ever_pitkin.f90:         CALL s_funct(psi,alpha,s0,s1,s2,s3,DS2DA=ds2da,DS0DA=ds0da)
ever_pitkin.f90:         CALL s_funct(psi,alpha,s0,s1,s2,s3)
ever_pitkin.f90:      CALL s_funct(psi,alpha,s0,s1,s2,s3)
ever_pitkin.f90:    CALL s_funct(psi,alpha,s0,s1,s2,s3)
ever_pitkin.f90:      CALL s_funct(psi,alpha,s0,s1,s2,s3)
ever_pitkin.f90:   call prvec(x,y,ang)       !  angular momentum 
ever_pitkin.f90:   call prvec(y,ang,vlenz) ! Lenz vector
fidinam4.f90:  CALL rmsp(tmpstr,le) 
fidinam4.f90:  CALL rmsp(eledir,le) 
fidinam4.f90:  call rmsp(astnam,ld1) 
fidinam4.f90:  CALL rmsp(nam0,ld1) 
fidinam4.f90:  CALL rmsp(fulldir,le)
fidinam4.f90:  CALL rmsp(file,le) 
fidinam4.f90:  CALL rmsp(file,le)
fidinam4.f90:  CALL rmsp(name,ll) 
fidinam4.f90:  CALL decode_mjd(dat,mjd)
fidinam4.f90:  CALL rmsp(dircom4,le)
fidinam4.f90:      CALL base_10_to_64(number, temp_code)
fidinam4.f90:   CALL mjddat(tjm, d, m, y, hour)
file_oper.f90:!   CALL rmsp(name_rescue,ll)
file_oper.f90:!    CALL waste_time(100) 
file_oper.f90:  CALL flush(iun)  
file_oper.f90:!  CALL rmsp(filna_fo(iun),le)
file_oper.f90:!  CALL get_environment_variable("ORBFIT_HOME", dlibd, 99, env_status)
file_oper.f90:  CALL getenv("ORBFIT_DATA", orbfit_home_env)
file_oper.f90:     CALL filopn(unit,'libdir.dat','old')
file_oper.f90:     CALL filclo(unit,' ')
file_oper.f90:     CALL filopn(unit,file,'old') 
file_oper.f90:     CALL filclo(unit,'delete') 
genio7.f90:      call rmbl(name,nnam) 
genio7.f90:      call splili(line,ll,lnam,inam,lval,ival,lcom,icom) 
genio7.f90:      call rmbl(name,nnam) 
genio7.f90:      call splili(line,ll,lnam,inam,lval,ival,lcom,icom) 
genio7.f90:      call rmbl(name,nnam) 
genio7.f90:      call splili(line,ll,lnam,inam,lval,ival,lcom,icom) 
genio7.f90:      call rmbl(name,nnam) 
genio7.f90:      call splili(line,ll,lnam,inam,lval,ival,lcom,icom) 
genio7.f90:      call rmbl(name,nnam) 
genio7.f90:      call splili(line,ll,lnam,inam,lval,ival,lcom,icom) 
genio7.f90:      call rmbl(name,nnam) 
genio7.f90:      call splili(line,ll,lnam,inam,lval,ival,lcom,icom) 
genio7.f90:      call cmpstr(line,ll) 
genio7.f90:      call rmbl(lnam,inam) 
genio7.f90:      call rmbl(lval,ival) 
header_input.f90:      CALL splkvc(rec,key1,val1,comm,skip,end) 
header_input.f90:      CALL chkpdf(nfne,nfnex,'nfnex') 
header_input.f90:          CALL strcnt(valsf(i),c,rest,error) 
header_input.f90:          CALL ch2tim(valsf(i),mjd,sec,scale,error) 
header_input.f90:          CALL ch2ref(valsf(i),rsys,epoch,error) 
header_input.f90:      CALL rmsp(rec1,lr) 
header_input.f90:          CALL rmsp(rec1,lk) 
header_input.f90:      CALL rmsp(tmp,lk) 
header_input.f90:      CALL norstr(tmp,lv) 
header_input.f90:      CALL chkpdf(lt,lckx,'lckx') 
header_input.f90:      CALL getkv(ck(1:lt),val,ktyp1,file,kr,found) 
header_input.f90:      CALL strcnt(val,v,rest,error) 
header_input.f90:  CALL libini 
header_input.f90:  CALL namini 
header_input.f90:  CALL filopl(iunit,'propag.def') 
header_input.f90:  CALL rdnam(iunit) 
header_input.f90:  CALL filclo(iunit,' ') 
header_input.f90:  call rmsp(progna,le) 
header_input.f90:     CALL filopl(iunit,file(1:le+4)) 
header_input.f90:     CALL rdnam(iunit) 
header_input.f90:     CALL filclo(iunit,' ')
header_input.f90:  CALL rmsp(run,lerun) 
header_input.f90:     CALL filopn(iunit,file,'OLD') 
header_input.f90:     CALL rdnam(iunit) 
header_input.f90:     CALL filclo(iunit,' ') 
header_input.f90:  CALL rdklst(file) 
header_input.f90:  CALL chkkey 
header_input.f90:  CALL rmsp(prognp,le)
header_input.f90:  CALL rdncha(prognp,nameopt,optval,ireq,found,fail1,fail)
header_input.f90:  CALL rmsp(optval,le1)
header_input.f90:  CALL rmsp(prognp,le)
header_input.f90:  CALL rdnrea(prognp,nameopt,optval,ireq,found,fail1,fail)
header_input.f90:  CALL rmsp(prognp,le)
header_input.f90:  CALL rdnint(prognp,nameopt,optval,ireq,found,fail1,fail)
header_input.f90:  CALL rmsp(prognp,le)
header_input.f90:  CALL rdnlog(prognp,nameopt,optval,ireq,found,fail1,fail)
header_input.f90:      CALL libini 
header_input.f90:      CALL namini 
header_input.f90:      CALL filopl(iunit,'propag.def') 
header_input.f90:      CALL rdnam(iunit) 
header_input.f90:      CALL filclo(iunit,' ') 
header_input.f90:      CALL rmsp(file,le) 
header_input.f90:        CALL filopn(iunit,file(1:le),'OLD') 
header_input.f90:        CALL rdnam(iunit) 
header_input.f90:        CALL filclo(iunit,' ') 
header_input.f90:      call rmsp(progna,le) 
header_input.f90:      CALL rdklst(file) 
header_input.f90:      CALL chkkey                                                      
header_input.f90:      CALL rmsp(run,le) 
header_input.f90:      call filopn(iun20,file,'UNKNOWN') 
iers_ser.f90:    CALL iersts(tjme,eop,eopd,eopdd,nder) 
iers_ser.f90:    CALL delthp(mjde,sece,dt,dt1,dt2,nder) 
iers_ser.f90:    CALL xypol(tjme,xpol,x1pol,x2pol,nder) 
iers_ser.f90:    CALL equeqd(tjme,eqeq,eqeq1,eqeq2,nder) 
iers_ser.f90:    CALL timnf(mjdu,secu,'UT1') 
iers_ser.f90:    CALL gmstd(mjdu,secu,gmst,gmstd1,gmstd2,nder) 
iers_ser.f90:    CALL rotmt( -xpol(1) , ra , 2) 
iers_ser.f90:    CALL rotmt( -xpol(2) , rb , 1) 
iers_ser.f90:    CALL rotmt(     gast , rc , 3) 
iers_ser.f90:       CALL rotmt1( -xpol(1) , ra1 , 2, -x1pol(1)) 
iers_ser.f90:       CALL rotmt1( -xpol(2) , rb1 , 1, -x1pol(2)) 
iers_ser.f90:       CALL rotmt1(     gast , rc1 , 3,     gast1) 
iers_ser.f90:       CALL rotmt2( -xpol(1) , ra2 , 2, -x1pol(1), -x2pol(1)) 
iers_ser.f90:       CALL rotmt2( -xpol(2) , rb2 , 1, -x1pol(2), -x2pol(2)) 
iers_ser.f90:       CALL rotmt2(     gast , rc2 , 3,     gast1,     gast2) 
iers_ser.f90:    IF(nder.GE.1) rot1=rc1 ! CALL assmat(rot1,rc1) 
iers_ser.f90:    rot=rc ! CALL assmat(rot,rc) 
iers_ser.f90:    IF(nder.GE.2) CALL pd2mat(rb,rb1,rb2,rot,rot1,rot2) 
iers_ser.f90:    IF(nder.GE.1) CALL pd1mat(rb,rb1,rot,rot1) 
iers_ser.f90:    rot=MATMUL(rb,rot) ! CALL pdmat(rb,rot) 
iers_ser.f90:    IF(nder.GE.2) CALL pd2mat(ra,ra1,ra2,rot,rot1,rot2) 
iers_ser.f90:    IF(nder.GE.1) CALL pd1mat(ra,ra1,rot,rot1) 
iers_ser.f90:    rot=MATMUL(ra,rot) ! CALL pdmat(ra,rot) 
iers_ser.f90:       CALL filopl(unit,'dut1r.coe') 
iers_ser.f90:    CALL nutarg(tjme,arg,argd,argdd,ntder) 
iers_ser.f90:      CALL nutarg(tjme,arg,argd,argdd,ntder) 
iers_ser.f90:      CALL obleqd(tjme,obl,obl1,obl2,nder) 
iers_ser.f90:      CALL nutnd(tjme,dpsi,deps,dpsi1,deps1,dpsi2,deps2,nder) 
iers_ser.f90:      CALL rdncha('IERS.eopc04.','dir',ieidir,.false.,found,fail1,fail) 
iers_ser.f90:      CALL rdncha('IERS.eopc04.','list',ieilis,.false.,found,fail1,fail) 
iers_ser.f90:      CALL sv2int('IERS.','smoothing',cval,iutsmo,.false.,    &
iers_ser.f90:      CALL rdnint('IERS.','sampling',isamp,.false.,found,fail1,fail) 
iers_ser.f90:      CALL rdnlog('IERS.ccor.','use',cciera,.false.,found,fail1,fail) 
iers_ser.f90:      CALL rdnint('IERS.','lint',nlpler,.false.,found,fail1,fail) 
iers_ser.f90:      CALL rdnint('IERS.','lez',nvpler,.false.,found,fail1,fail) 
iers_ser.f90:      CALL rdnint('IERS.','lsz',nspler,.false.,found,fail1,fail) 
iers_ser.f90:      CALL rdnint('IERS.','smord',nsmopl,.false.,found,fail1,fail) 
iers_ser.f90:      CALL rdnlog('IERS.bulA.','use',blause,.false.,found,fail1,fail) 
iers_ser.f90:         CALL rdncha('IERS.bulA.','file',blafil,.false.,     &
iers_ser.f90:      CALL rdnlog('IERS.','extrapolation',extra,.false.,      &
iers_ser.f90:      CALL filopn(unilis,ieilis,'OLD') 
iers_ser.f90:      CALL filopn(uniier,file,'OLD') 
iers_ser.f90:         CALL dut1r(tjme,du,dud,dudd,0) 
iers_ser.f90:         CALL dut1s(tjme,du,dud,dudd,0) 
iers_ser.f90:      CALL filclo(uniier,' ') 
iers_ser.f90:      CALL filclo(unilis,' ') 
iers_ser.f90:               CALL smoocn(tn,c0,c1,c2,2) 
iers_ser.f90:               CALL smoocn(tn,c0,c1,c2,2) 
iers_ser.f90:         CALL filopl(unicie,flcier) 
iers_ser.f90:         CALL filclo(unicie,' ') 
iers_ser.f90:         CALL ierini 
iers_ser.f90:         CALL pcwlgi(xiers,tiers,niers,5,niersx,   &
iers_ser.f90:         CALL dut1r(tjme,du,dud,dudd,ntder) 
iers_ser.f90:         CALL dut1s(tjme,du,dud,dudd,ntder) 
iers_ser.f90:      CALL nutwhr(tjme,dpsi,deps,dpsi1,deps1,dpsi2,deps2,nder) 
iers_ser.f90:         CALL iersts(tjme,eop,eopd,eopdd,nder) 
iers_ser.f90:      CALL rotmt(    -z , ra , 3) 
iers_ser.f90:      CALL rotmt( theta , rb , 2) 
iers_ser.f90:      CALL rotmt( -zeta , rc , 3) 
iers_ser.f90:         CALL rotmt1(    -z , ra1 , 3,    -z1) 
iers_ser.f90:         CALL rotmt1( theta , rb1 , 2, theta1) 
iers_ser.f90:         CALL rotmt1( -zeta , rc1 , 3, -zeta1) 
iers_ser.f90:         CALL rotmt2(    -z , ra2 , 3,    -z1,    -z2) 
iers_ser.f90:         CALL rotmt2( theta , rb2 , 2, theta1, theta2) 
iers_ser.f90:         CALL rotmt2( -zeta , rc2 , 3, -zeta1, -zeta2) 
iers_ser.f90:      IF(nder.GE.2) CALL pd2mat(rb,rb1,rb2,rot,rot1,rot2) 
iers_ser.f90:      IF(nder.GE.1) CALL pd1mat(rb,rb1,rot,rot1) 
iers_ser.f90:      rot=MATMUL(rb,rot) ! CALL pdmat(rb,rot) 
iers_ser.f90:      IF(nder.GE.2) CALL pd2mat(ra,ra1,ra2,rot,rot1,rot2) 
iers_ser.f90:      IF(nder.GE.1) CALL pd1mat(ra,ra1,rot,rot1) 
iers_ser.f90:      rot=MATMUL(ra,rot) ! CALL pdmat(ra,rot) 
iers_ser.f90:      CALL filopl(unit,file) 
iers_ser.f90:         CALL dut1r(tjme,du,dud,dudd,0) 
iers_ser.f90:         CALL dut1s(tjme,du,dud,dudd,0) 
iers_ser.f90:      CALL filclo(unit,' ') 
iers_ser.f90:      CALL obleqd(tjme,epsm,epsm1,epsm2,nder) 
iers_ser.f90:      CALL nutnd(tjme,dpsi,deps,dpsi1,deps1,dpsi2,deps2,nder) 
iers_ser.f90:      CALL rotmt( -epst , ra , 1) 
iers_ser.f90:      CALL rotmt( -dpsi , rb , 3) 
iers_ser.f90:      CALL rotmt(  epsm , rc , 1) 
iers_ser.f90:         CALL rotmt1( -epst , ra1 , 1, -epst1) 
iers_ser.f90:         CALL rotmt1( -dpsi , rb1 , 3, -dpsi1) 
iers_ser.f90:         CALL rotmt1(  epsm , rc1 , 1,  epsm1) 
iers_ser.f90:         CALL rotmt2( -epst , ra2 , 1, -epst1, -epst2) 
iers_ser.f90:         CALL rotmt2( -dpsi , rb2 , 3, -dpsi1, -dpsi2) 
iers_ser.f90:         CALL rotmt2(  epsm , rc2 , 1,  epsm1,  epsm2) 
iers_ser.f90:      IF(nder.GE.2) CALL pd2mat(rb,rb1,rb2,rot,rot1,rot2) 
iers_ser.f90:      IF(nder.GE.1) CALL pd1mat(rb,rb1,rot,rot1) 
iers_ser.f90:      rot=MATMUL(rb,rot) ! CALL pdmat(rb,rot) 
iers_ser.f90:      IF(nder.GE.2) CALL pd2mat(ra,ra1,ra2,rot,rot1,rot2) 
iers_ser.f90:      IF(nder.GE.1) CALL pd1mat(ra,ra1,rot,rot1) 
iers_ser.f90:      rot=MATMUL(ra,rot) ! CALL pdmat(ra,rot) 
iers_ser.f90:         CALL rotsys('MEAN',mj2000,s2000,rsys1,mjd1,sec1,rot,rot1,     &
iers_ser.f90:         CALL trsp3(rot) 
iers_ser.f90:         CALL prodmv(piner,rot,p1) 
iers_ser.f90:         CALL prodmv(viner,rot,v1) 
iers_ser.f90:         CALL prodmv(vtr,rot1,piner) 
iers_ser.f90:         vtr=-1.d0*vtr ! CALL prodvs(vtr,-1.d0,vtr) 
iers_ser.f90:         viner=vtr+viner ! CALL sumv(viner,vtr,viner) 
iers_ser.f90:         CALL rotsys('MEAN',mj2000,s2000,rsys1,mjd1,sec1,rot,rot1,     &
iers_ser.f90:         CALL trsp3(rot) 
iers_ser.f90:         CALL prodmv(piner,rot,p1) 
iers_ser.f90:         CALL prodmv(viner,rot,v1) 
iers_ser.f90:         CALL rotsys('MEAN',mj2000,s2000,rsys2,mjd2,sec2,rot,rot1,     &
iers_ser.f90:         CALL prodmv(p2,rot,piner) 
iers_ser.f90:         CALL prodmv(v2,rot,viner) 
iers_ser.f90:         CALL prodmv(vtr,rot1,piner) 
iers_ser.f90:         v2=vtr+v2 ! CALL sumv(v2,vtr,v2) 
iers_ser.f90:         CALL rotsys('MEAN',mj2000,s2000,rsys2,mjd2,sec2,rot,rot1,     &
iers_ser.f90:         CALL prodmv(p2,rot,piner) 
iers_ser.f90:         CALL prodmv(v2,rot,viner) 
iers_ser.f90:      CALL timnf(mjd1,sec1,'ET ') 
iers_ser.f90:      CALL timnf(mjd2,sec2,'ET ') 
iers_ser.f90:      rot=0.d0 ! CALL assmat(rot,rot1) 
iers_ser.f90:    CALL obleqd(t,obl,obl1,obl2,0) 
iers_ser.f90:    CALL rotmt(-obl,r,1) 
iers_ser.f90:    rot=MATMUL(r,rot) ! CALL pdmat(r,rot) 
iers_ser.f90:    CALL rnutd(t,r,r1,r2,0) 
iers_ser.f90:    CALL trsp3(r) 
iers_ser.f90:    rot=MATMUL(r,rot) ! CALL pdmat(r,rot) 
iers_ser.f90:    CALL gmsnom(mjd,sec,gmst,gmst1) 
iers_ser.f90:    CALL equeqd(t,eqeq,eqeq1,eqeq2,0) 
iers_ser.f90:    CALL rotmt(-gast,r,3) 
iers_ser.f90:    rot=MATMUL(r,rot) ! CALL pdmat(r,rot) 
iers_ser.f90:    CALL diurot(mjd,sec,r,r1,r2,0) 
iers_ser.f90:    CALL trsp3(r) 
iers_ser.f90:    rot=MATMUL(r,rot) ! CALL pdmat(r,rot) 
iers_ser.f90:    CALL precd(t,r,r1,r2,0) 
iers_ser.f90:    CALL trsp3(r) 
iers_ser.f90:    rot=MATMUL(r,rot) ! CALL pdmat(r,rot) 
iers_ser.f90:    CALL precd(t2,r,r1,r2,nder) 
iers_ser.f90:    IF(nder.GE.2) CALL pd2mat(r,r1,r2,rot,rot1,rot2) 
iers_ser.f90:    IF(nder.GE.1) CALL pd1mat(r,r1,rot,rot1) 
iers_ser.f90:    rot=MATMUL(r,rot) ! CALL pdmat(r,rot) 
iers_ser.f90:        CALL rnutd(t,r,r1,r2,nder) 
iers_ser.f90:        CALL trsp3(r) 
iers_ser.f90:        IF(nder.GE.1) CALL trsp3(r1) 
iers_ser.f90:        IF(nder.GE.2) CALL trsp3(r2) 
iers_ser.f90:        IF(nder.GE.2) CALL pd2mat(r,r1,r2,rot,rot1,rot2) 
iers_ser.f90:        IF(nder.GE.1) CALL pd1mat(r,r1,rot,rot1) 
iers_ser.f90:        rot=MATMUL(r,rot) ! CALL pdmat(r,rot) 
iers_ser.f90:        CALL gmsnom(mjd,sec,gmst,gmst1) 
iers_ser.f90:        CALL equeqd(t,eqeq,eqeq1,eqeq2,nder) 
iers_ser.f90:        CALL rotmt(gast,r,3) 
iers_ser.f90:  CALL rotmt1(gast,r1,3,gast1) 
iers_ser.f90:  CALL rotmt2(gast,r2,3,gast1,gast2) 
iers_ser.f90:        IF(nder.GE.2) CALL pd2mat(r,r1,r2,rot,rot1,rot2) 
iers_ser.f90:        IF(nder.GE.1) CALL pd1mat(r,r1,rot,rot1) 
iers_ser.f90:        rot=MATMUL(r,rot) ! CALL pdmat(r,rot) 
iers_ser.f90:        CALL diurot(mjd,sec,r,r1,r2,nder) 
iers_ser.f90:        IF(nder.GE.2) CALL pd2mat(r,r1,r2,rot,rot1,rot2) 
iers_ser.f90:        IF(nder.GE.1) CALL pd1mat(r,r1,rot,rot1) 
iers_ser.f90:        rot=MATMUL(r,rot) ! CALL pdmat(r,rot) 
iers_ser.f90:        CALL rnutd(t,r,r1,r2,nder) 
iers_ser.f90:        IF(nder.GE.2) CALL pd2mat(r,r1,r2,rot,rot1,rot2) 
iers_ser.f90:        IF(nder.GE.1) CALL pd1mat(r,r1,rot,rot1) 
iers_ser.f90:        rot=MATMUL(r,rot) ! CALL pdmat(r,rot) 
iers_ser.f90:        CALL obleqd(t,obl,obl1,obl2,nder) 
iers_ser.f90:        CALL rotmt(obl,r,1) 
iers_ser.f90:        IF(nder.GE.1) CALL rotmt1(obl,r1,1,obl1) 
iers_ser.f90:        IF(nder.GE.2) CALL rotmt2(obl,r2,1,obl1,obl2) 
iers_ser.f90:        IF(nder.GE.2) CALL pd2mat(r,r1,r2,rot,rot1,rot2) 
iers_ser.f90:        IF(nder.GE.1) CALL pd1mat(r,r1,rot,rot1) 
iers_ser.f90:        rot=MATMUL(r,rot) ! CALL pdmat(r,rot) 
iers_ser.f90:    CALL obleqd(t,obl,obl1,obl2,nder) 
iers_ser.f90:    CALL rotmt(-obl,r,1) 
iers_ser.f90:    IF(nder.GE.1) CALL rotmt1(-obl,r1,1,-obl1) 
iers_ser.f90:    IF(nder.GE.2) CALL rotmt2(-obl,r2,1,-obl1,-obl2) 
iers_ser.f90:    IF(nder.GE.2) CALL pd2mat(r,r1,r2,rot,rot1,rot2) 
iers_ser.f90:    IF(nder.GE.1) CALL pd1mat(r,r1,rot,rot1) 
iers_ser.f90:    rot=MATMUL(r,rot) ! CALL pdmat(r,rot) 
iers_ser.f90:    CALL gmsnom(mjd,sec,gmst,gmst1) 
iers_ser.f90:    CALL equeqd(t,eqeq,eqeq1,eqeq2,nder) 
iers_ser.f90:    CALL rotmt(-gast,r,3) 
iers_ser.f90:        CALL rotmt1(-gast,r1,3,-gast1) 
iers_ser.f90:        CALL rotmt2(-gast,r2,3,-gast1,-gast2) 
iers_ser.f90:    IF(nder.GE.2) CALL pd2mat(r,r1,r2,rot,rot1,rot2) 
iers_ser.f90:    IF(nder.GE.1) CALL pd1mat(r,r1,rot,rot1) 
iers_ser.f90:    rot=MATMUL(r,rot) ! CALL pdmat(r,rot) 
iers_ser.f90:    CALL diurot(mjd,sec,r,r1,r2,nder) 
iers_ser.f90:    CALL trsp3(r) 
iers_ser.f90:    IF(nder.GE.1) CALL trsp3(r1) 
iers_ser.f90:    IF(nder.GE.2) CALL trsp3(r2) 
iers_ser.f90:    IF(nder.GE.2) CALL pd2mat(r,r1,r2,rot,rot1,rot2) 
iers_ser.f90:    IF(nder.GE.1) CALL pd1mat(r,r1,rot,rot1) 
iers_ser.f90:    rot=MATMUL(r,rot) ! CALL pdmat(r,rot) 
iers_ser.f90:      CALL iersts(tjme,eop,eopd,eopdd,nder) 
iers_ser.f90:      CALL prodmm(p1,r1d,r2) 
iers_ser.f90:      CALL prodmm(p2,r1,r2d) 
iers_ser.f90:      r2d=p1+p2 ! CALL summat(r2d,p1,p2) 
iers_ser.f90:      CALL prodmm(p1,r1dd,r2) 
iers_ser.f90:      CALL prodmm(p2,r1d,r2d) 
iers_ser.f90:      CALL prodmm(p3,r1,r2dd) 
io_elems.f90:        CALL filopn(uniin,infil1(1:lf),'OLD') 
io_elems.f90:        CALL oefdet(uniin,infil1(1:lf),form) ! SELF-DETECT FILE FORMAT 
io_elems.f90:        IF(.NOT.opened) CALL filopn(uniin,infil1,'OLD') 
io_elems.f90:        CALL rdoef(uniin,infil1,objnam,nobj,deforb,defcn,eltype,telem,&
io_elems.f90:        CALL clorbf 
io_elems.f90:!        IF(.NOT.opened) CALL filopn(uniin,infil1,'OLD') 
io_elems.f90:!        CALL rdast1(uniin,infil1,objnam,nobj,deforb,defcn,            &
io_elems.f90:!        CALL filclo(uniin,' ') 
io_elems.f90:          IF(.NOT.opened) CALL filopn(uniin,infil1,'OLD') 
io_elems.f90:          CALL rdast2(uniin,infil1,objnam,nobj,deforb,defcn,            &
io_elems.f90:          CALL filclo(uniin,' ') 
io_elems.f90:          IF(.NOT.opened) CALL filopn(uniin,infil1,'OLD') 
io_elems.f90:          CALL rdmpca(uniin,infil1,objnam,nobj,deforb,defcn,            &
io_elems.f90:          CALL filclo(uniin,' ') 
io_elems.f90:         CALL rmsp(recwb,lrwb) 
io_elems.f90:                  CALL strcnt(tmp,tmp1,tmp2,error) 
io_elems.f90:  CALL rmsp(name,ln) 
io_elems.f90:        CALL rmsp(krc,lc) 
io_elems.f90:     CALL mpcpds(objnam(k),nmpc(k),error) 
io_elems.f90:        CALL mpcdat(ep5,telem(k),error) 
io_elems.f90:        CALL rmsp(krc,lc) 
io_elems.f90:  CALL rmsp(filnam,lf)
io_elems.f90:     CALL iaucod2(nmpc1,objnam(k),error) 
io_elems.f90:     CALL mpcdat(ep5,telem(k),error) 
io_elems.f90:     CALL rmsp(krc,lc)
io_elems.f90:  CALL oporbf(file,uniin) 
io_elems.f90:  CALL rdorb(name1,elem1,eltyp1,t1,cove1,defcov,nore1,defnor,       &
io_elems.f90:  CALL rmsp(nc1,lc1) 
io_elems.f90:              CALL cooder(elem1,eltyp1,gma1,xv,'CAR',enne,de) 
io_elems.f90:              IF(defcov) CALL convertcovdp(6,cove1,de,cove2)
io_elems.f90:                 CALL norprsdp(nore1,de,6,nore2,error) 
io_elems.f90:              CALL rotpn(rot,rsys,epoch,t1,'ECLM','J2000',0.d0) 
io_elems.f90:              CALL prodmv(elem(1,k),rot,xv(1)) 
io_elems.f90:              CALL prodmv(elem(4,k),rot,xv(4)) 
io_elems.f90:               IF(defcov) CALL convertcovdp(6,cove2,de,cove(1:6,1:6,k))
io_elems.f90:                  CALL norprsdp(nore2,de,6,nore(1,1,k),error) 
io_elems.f90:               CALL coocha(elem1,eltyp1,gma1,xv,'CAR',enne) 
io_elems.f90:               CALL rotpn(rot,rsys,epoch,t1,'ECLM','J2000',0.d0) 
io_elems.f90:               CALL prodmv(elem(1,k),rot,xv(1)) 
io_elems.f90:               CALL prodmv(elem(4,k),rot,xv(4)) 
io_elems.f90:         CALL fixcnm(defcov,defnor,defcn(k),cove(1,1,k),nore(1,1,k)) 
io_elems.f90:         CALL rmsp(krc,lc) 
io_elems.f90:      CALL filopn(orbunt,orbfn,'OLD') 
io_elems.f90:   CALL rdfnam(orbunt,orbfn,orbnr) 
io_elems.f90:   CALL rdfcha(orbunt,'format',.true.,form,found,kr) 
io_elems.f90:   CALL rdfcha(orbunt,'rectype',.false.,rectyp,found,kr) 
io_elems.f90:      CALL getrsc(orbunt,rec,orbnr,end) 
io_elems.f90:      CALL rdfcha(orbunt,'elem',.true.,deltyp,found,kr) 
io_elems.f90:   CALL rdfref(orbunt,'refsys',.false.,dfrsty,dfrsep,found,kr) 
io_elems.f90:   CALL rdftim(orbunt,'epoch',.false.,depstr,mjd,sec,scale,deft0,kr) 
io_elems.f90:      CALL cnvtim(mjd,sec,scale,mjde,sece,'TDT') 
io_elems.f90:   CALL filclo(orbunt,' ') 
io_elems.f90:      CALL getrsc(orbunt,rec,orbnr,eof) 
io_elems.f90:      CALL strcnt(rec,name,rest,error) 
io_elems.f90:      CALL getrsc(orbunt,name,orbnr,eof) 
io_elems.f90:      CALL getrsc(orbunt,rec,orbnr,end1) 
io_elems.f90:      CALL getrsc(orbunt,rec,orbnr,end1) 
io_elems.f90:         CALL ch2tim(rec,mjd,sec,scale,error) 
io_elems.f90:         CALL cnvtim(mjd,sec,scale,mjde,sece,'TDT') 
io_elems.f90:            CALL getrsc(orbunt,rec,orbnr,end1) 
io_elems.f90:            CALL getrsc(orbunt,rec,orbnr,end1) 
io_elems.f90:     CALL mjddat(t0,day,month,year,hour) 
io_elems.f90:      CALL tchol(nore,6,6,indp,err) 
io_elems.f90:      IF(defnor) CALL inver(nore,tmp,6,6) 
io_elems.f90:      CALL tchol(cove,6,6,indp,err) 
io_elems.f90:      IF(defcov) CALL inver(cove,tmp,6,6) 
iorwo_old.f90:      CALL filopn(unit,file,'UNKNOWN') 
iorwo_old.f90:      call heapsort(tutm,n,is) 
iorwo_old.f90:         CALL mjddat(tutm(is(i)),iday,imonth,iyear,hour) 
iorwo_old.f90:         CALL sessag(alpha(is(i))*degrad/15.d0,signo,ihour,imin,sec) 
iorwo_old.f90:         CALL rmsp(tmpstr,ln) 
iorwo_old.f90:         CALL sessag(delta(is(i))*degrad,signo,ideg,imin,sec) 
iorwo_old.f90:         CALL rmsp(tmpstr,ln) 
iorwo_old.f90:         CALL rmsp(tmpstr,ln) 
iorwo_old.f90:         CALL codestat(obscod(is(i)),obsstr) 
iorwo_old.f90:            CALL mjddat(tutm(is(i)),iday,imonth,iyear,hour) 
iorwo_old.f90:   99 CALL filclo(unit,' ') 
iorwo_old.f90:      CALL filopn(unit,file,'UNKNOWN') 
iorwo_old.f90:         CALL rmsp(tmprec,ll) 
iorwo_old.f90:            CALL statcode(obsstr,obscod(n)) 
iorwo_old.f90:            CALL cnvtim(mjd,sec,scale,mjdt,sect,'TDT') 
iorwo_old.f90:            CALL cnvtim(mjd,sec,scale,mjdt,sect,'TDT') 
iorwo_old.f90:   99 CALL filclo(unit,' ') 
jpl_ephem.f90:!     CALL rdncha('JPLDE.','file',namfil,.false.,found,fail1,fail)      
jpl_ephem.f90:      CALL filass(nrfile,namfil) 
jpl_ephem.f90:!     check for nutation call                                           
jpl_ephem.f90:          call state(et2,list,pv,rrd,istate) 
jpl_ephem.f90:          call state(et2,list,pv,rrd,istate) 
jpl_ephem.f90:!       set up proper entries in 'list' array for state call            
jpl_ephem.f90:!       make call to state                                              
jpl_ephem.f90:      call state(et2,list,pv,rrd,istate) 
jpl_ephem.f90:!        call fszer1(nrecl,ksize,nrfile,namfil)                         
jpl_ephem.f90:         call fszer2(nrecl,ksize,nrfile,namfil) 
jpl_ephem.f90:!        call fszer3(nrecl,ksize,nrfile,namfil)                         
jpl_ephem.f90:      call split(s,pjd(1)) 
jpl_ephem.f90:      call split(et2(2),pjd(3)) 
jpl_ephem.f90:      call split(pjd(2),pjd(3)) 
jpl_ephem.f90:!      call interp(buf(ipt(1,11)),t,ipt(2,11),3,ipt(3,11),2,pvsun)      
jpl_ephem.f90:      call interp(buf(ipt(1,11)),t,ipt(2,11),3,ipt(3,11),istate,pvsun) 
jpl_ephem.f90:!      call interp(buf(ipt(1,i)),t,ipt(2,i),3,ipt(3,i),                 
jpl_ephem.f90:        call interp(buf(ipt(1,i)),t,ipt(2,i),3,ipt(3,i),                &
jpl_ephem.f90:     & call interp(buf(ipt(1,12)),t,ipt(2,12),2,ipt(3,12),              &
jpl_ephem.f90:     & call interp(buf(ipt(1,13)),t,ipt(2,13),3,ipt(3,13),              &
jpl_ephem.f90:!  call state to initialize the ephemeris and read in the constants     
jpl_ephem.f90:      call state(pp1,ipp2,pp3,pp4,istate) 
jpl_ephem.f90:!      call state(0.d0,0,0,0.d0)                                        
math_lib.f90:      v3(1:3,1)=tpno ! CALL vcopy(3,tpno,v3(1,1)) 
math_lib.f90:      CALL prvec(tpno,v3(1,3),v3(1,2)) 
math_lib.f90:  cinv=c ! call mcopy(n,n,c,cinv) 
math_lib.f90:  call tchol(cinv,n,n,indp,err) 
math_lib.f90:  call inver(cinv,ws,n,n) 
math_lib.f90:   call rs(n,n,a,aval(1:n),1,q(1:n,1:n),w1,w2,ierr)
math_lib.f90:  CALL matin(jacinv,det,6,0,6,ising,1) 
math_lib.f90:  CALL convertnordp(nd,nor1,jacinv(1:6,1:6),nor2)
math_lib.f90:  CALL matin(jacinv,det,nd,0,nd,ising,1) 
math_lib.f90:  CALL convertnor(nd,nor1,jacinv,nor2)
math_lib.f90:    CALL matin(aa,det,4,1,4,ising,1)
math_lib.f90:       CALL matin(aa,det,3,1,3,ising,1)
name_rules.f90:  CALL rmsp(longname,le) 
name_rules.f90:!     CALL rmsp(longname,le1)
name_rules.f90:        CALL decode_date_mjd(nam(5:7),times(id))
name_rules.f90:     CALL heapsortname(nameunsort,times,nid,ind)
obs_simul.f90:     CALL codestat(ids,obs%obscod_s)
obs_simul.f90:        CALL observer_position(t1,obs%obspos,obs%obsvel,OBSCODE=ids)
obs_simul.f90:     CALL obscoo(ids,obs%obspos,stname)
obs_simul.f90:     CALL obscoo(ids,obs%obsvel,stname)
obsvarie.f90:      CALL rmsp(numfield,ln)                                
obsvarie.f90:      CALL rmsp(numfield,ln)                                
obsvarie.f90:  123    CALL rmsp(iaudes,ln) 
obsvarie.f90:         CALL rmsp(numfield,ln) 
obsvarie.f90:         CALL rmsp(iaudes,ln) 
obsvarie.f90:  CALL mjddat(tmin,iday,month,yearm,hour) 
obsvarie.f90:  CALL mjddat(tmax,iday,month,yearx,hour) 
option_input.f90:  CALL chkpdf(1,nnex,'nnex') 
option_input.f90:  CALL chkpdf(lf,lcfx,'lcfx') 
option_input.f90:  CALL rmsp(rec1,lr) 
option_input.f90:  CALL norstr(rec2,lr2) 
option_input.f90:     CALL strcnt(rec2(7:lr2),inpfl,rest,error) 
option_input.f90:     CALL filopl(iuna,inpfl) 
option_input.f90:     CALL rdnam1(iuna) 
option_input.f90:     CALL filclo(iuna,' ') 
option_input.f90:     CALL rmsp(rec1,lk) 
option_input.f90:     CALL chkfln(lk,lckx,'keyword',kr,infile) 
option_input.f90:  CALL rmsp(key1,lk) 
option_input.f90:  CALL chkfln(lk,lckx,'keyword',kr,infile) 
option_input.f90:  CALL norstr(val1,lv) 
option_input.f90:  CALL chkfln(lv,lcvx,'value',kr,infile) 
option_input.f90:  CALL chkpdf(nne,nnex,'nnex') 
option_input.f90:  CALL chkpdf(lf,lcfx,'lcfx') 
option_input.f90:  CALL rmsp(rec1,lr) 
option_input.f90:  CALL norstr(rec2,lr2) 
option_input.f90:     CALL strcnt(rec2(7:lr2),inpfl,rest,error) 
option_input.f90:     CALL filopl(iuna,inpfl) 
option_input.f90:     CALL rdnam2(iuna) 
option_input.f90:     CALL filclo(iuna,' ') 
option_input.f90:     CALL rmsp(rec1,lk) 
option_input.f90:     CALL chkfln(lk,lckx,'keyword',kr,infile) 
option_input.f90:  CALL rmsp(key1,lk) 
option_input.f90:  CALL chkfln(lk,lckx,'keyword',kr,infile) 
option_input.f90:  CALL norstr(val1,lv) 
option_input.f90:  CALL chkfln(lv,lcvx,'value',kr,infile) 
option_input.f90:  CALL chkpdf(nne,nnex,'nnex') 
option_input.f90:  CALL chkpdf(lf,lcfx,'lcfx') 
option_input.f90:  CALL rmsp(rec1,lr) 
option_input.f90:  CALL norstr(rec2,lr2) 
option_input.f90:     CALL strcnt(rec2(7:lr2),inpfl,rest,error) 
option_input.f90:     CALL filopl(iuna,inpfl) 
option_input.f90:     CALL rdnam3(iuna) 
option_input.f90:     CALL filclo(iuna,' ') 
option_input.f90:     CALL rmsp(rec1,lk) 
option_input.f90:     CALL chkfln(lk,lckx,'keyword',kr,infile) 
option_input.f90:  CALL rmsp(key1,lk) 
option_input.f90:  CALL chkfln(lk,lckx,'keyword',kr,infile) 
option_input.f90:  CALL norstr(val1,lv) 
option_input.f90:  CALL chkfln(lv,lcvx,'value',kr,infile) 
option_input.f90:  CALL chkpdf(nne,nnex,'nnex') 
option_input.f90:  CALL chkpdf(lf,lcfx,'lcfx') 
option_input.f90:  CALL rmsp(rec1,lr) 
option_input.f90:  CALL norstr(rec2,lr2) 
option_input.f90:     CALL rmsp(rec1,lk) 
option_input.f90:     CALL chkfln(lk,lckx,'keyword',kr,infile) 
option_input.f90:  CALL rmsp(key1,lk) 
option_input.f90:  CALL chkfln(lk,lckx,'keyword',kr,infile) 
option_input.f90:  CALL norstr(val1,lv) 
option_input.f90:  CALL chkfln(lv,lcvx,'value',kr,infile) 
option_input.f90:  CALL chkpdf(nne,nnex,'nnex') 
option_input.f90:  CALL filopl(iun,file) 
option_input.f90:     CALL chkpdf(ns2it,ns2itx,'ns2itx') 
option_input.f90:     CALL strcnt(rec,stval,rest,error) 
option_input.f90:     CALL chkpdf(lv,lcvx,'lcvx') 
option_input.f90:  CALL norstr(rec1,lk) 
option_input.f90:     CALL strcnt(rec1(7:),file1,rest,error) 
option_input.f90:     CALL rdkls1(file1) 
option_input.f90:  CALL chkpdf(lk,lckx,'lckx') 
option_input.f90:     CALL stspli(kt,' ',key1,nospli) 
option_input.f90:  CALL chkpdf(nkls,nklsx,'nklsx') 
option_input.f90:  CALL filclo(iun,' ') 
option_input.f90:  CALL filopl(iun,file) 
option_input.f90:     CALL chkpdf(ns2it,ns2itx,'ns2itx') 
option_input.f90:     CALL strcnt(rec,stval,rest,error) 
option_input.f90:     CALL chkpdf(lv,lcvx,'lcvx') 
option_input.f90:  CALL norstr(rec1,lk) 
option_input.f90:  CALL chkpdf(lk,lckx,'lckx') 
option_input.f90:     CALL stspli(kt,' ',key1,nospli) 
option_input.f90:  CALL chkpdf(nkls,nklsx,'nklsx') 
option_input.f90:  CALL filclo(iun,' ') 
option_input.f90:  CALL chkpdf(lt,lckx,'lckx') 
option_input.f90:  CALL getkv(ck(1:lt),val,ktyp1,file,kr,found) 
option_input.f90:  CALL strcnt(val,v,rest,error) 
option_input.f90:  CALL chkpdf(lt,lckx,'lckx') 
option_input.f90:  CALL getkv(ck(1:lt),val,ktyp1,file,kr,found) 
option_input.f90:  CALL chkpdf(lt,lckx,'lckx') 
option_input.f90:  CALL getkv(ck(1:lt),val,ktyp1,file,kr,found) 
option_input.f90:  CALL chkpdf(lt,lckx,'lckx') 
option_input.f90:  CALL getkv(ck(1:lt),val,ktyp1,file,kr,found) 
option_input.f90:  CALL chkpdf(lt,lckx,'lckx') 
option_input.f90:  CALL getkv(ck(1:lt),val,ktyp1,file,kr,found) 
option_input.f90:  CALL ch2tim(val,mjd,sec,scale,error) 
option_input.f90:  CALL chkpdf(lt,lckx,'lckx') 
option_input.f90:  CALL getkv(ck(1:lt),val,ktyp1,file,kr,found) 
option_input.f90:  CALL ch2ref(val,rsys,epoch,error) 
option_input.f90:      CALL chkpdf(lt,lckx,'lckx') 
option_input.f90:      CALL getkv(ck(1:lt),val,ktyp1,file,kr,found) 
option_input.f90:      CALL chkpdf(lt,lckx,'lckx') 
option_input.f90:      CALL getkv(ck(1:lt),val,ktyp1,file,kr,found) 
option_input.f90:      CALL chkpdf(lt,lckx,'lckx') 
option_input.f90:      CALL getkv(ck(1:lt),val,ktyp1,file,kr,found) 
option_input.f90:      CALL strcnt(val,v(i),rest,error) 
option_input.f90:      CALL chkpdf(lt,lckx,'lckx') 
option_input.f90:      CALL getkv(ck(1:lt),val,ktyp1,file,kr,found) 
option_input.f90:      CALL chkpdf(n,nx,namnx) 
option_input.f90:      CALL chkpdf(lt,lckx,'lckx') 
option_input.f90:      CALL getkv(ck(1:lt),val,ktyp1,file,kr,found) 
option_input.f90:      CALL chkpdf(n,nx,namnx) 
option_input.f90:      CALL chkpdf(lt,lckx,'lckx') 
option_input.f90:      CALL getkv(ck(1:lt),val,ktyp1,file,kr,found) 
option_input.f90:      CALL chkpdf(n,nx,namnx) 
option_input.f90:      CALL strcnt(val,v(i),rest,error) 
option_input.f90:      CALL chkpdf(lv,lcvx,'lcvx') 
option_input.f90:      CALL chkpdf(lf,lcfx,'lcfx') 
orb_els.f90:         call kepequ(x,z) 
orb_els.f90:         call carequ(x,gm,z,enne) 
orb_els.f90:         call eqpequ(x,z) 
orb_els.f90:         call equkep(z,eps,y) 
orb_els.f90:         call equeqp(z,eps,y) 
orb_els.f90:         call equcar(z,gm,eps,y) 
orb_els.f90:         call eye(6,derpar) 
orb_els.f90:         call eye(6,derws) 
orb_els.f90:         call ekensd(x,z,derws) 
orb_els.f90:         call carequ(x,gm,z,enne) 
orb_els.f90:         call prop2b(t0,z,t0,w,gm,ider,derws,ddxde) 
orb_els.f90:         call matin(derws,det,6,0,6,ising,1) 
orb_els.f90:         call eye(6,derws2) 
orb_els.f90:         call equkep(z,eps,y) 
orb_els.f90:         call ekensd(y,w,derws2) 
orb_els.f90:         call matin(derws2,det,6,0,6,ising,1) 
orb_els.f90:         call prop2b(t0,z,t0,y,gm,ider,derws2,ddxde) 
orb_els.f90:         call equcar(z,gm,eps,w) 
orb_els.f90:      derpar=MATMUL(derws,derws2) ! call mulmat(derws,6,6,derws2,6,6,derpar) 
orb_els.f90:      call lincom(f,xe,g,ye,x) 
orb_els.f90:      call lincom(f,xpe,g,ype,x(4)) 
orb_els.f90:      call lincom(f,dx1de2,g,dx2de2,dxde(1,2)) 
orb_els.f90:      call lincom(f,dx1de3,g,dx2de3,dxde(1,3)) 
orb_els.f90:      call lincom(f,dx4de2,g,dx5de2,dxde(4,2)) 
orb_els.f90:      call lincom(f,dx4de3,g,dx5de3,dxde(4,3)) 
orb_els.f90:      call prvec(x(1),x(4),ang) 
orb_els.f90:      call prvec(x(4),ang,vlenz) 
orb_els.f90:      call prvec(ang,f,g) 
pol_zeros.f90:      CALL PZSTART(N,APOLYR,ROOT,RADIUS,NZEROS,SMALL,BIG,ERR) 
pol_zeros.f90:            CALL NEWTON(N,POLY,APOLY,APOLYR,ROOT(I),SMALL,RADIUS(I),    &
pol_zeros.f90:              CALL ABERTH(N,I,ROOT,ABCORR) 
pol_zeros.f90:      CALL CNVEX(N+1,A,H) 
pol_zeros.f90:          CALL CMERGE(N,A,JC,M,H) 
pol_zeros.f90:      CALL LEFT(N,H,I,IL) 
pol_zeros.f90:      CALL RIGHT(N,H,I,IR) 
pol_zeros.f90:          CALL LEFT(N,H,IL,ILL) 
pol_zeros.f90:          CALL RIGHT(N,H,IR,IRR) 
read_ephem.f90:! integers for call to JPl routines                                     
read_ephem.f90:  call dpleph(et,ntarg,ncent,rrd,istate) 
read_ephem.f90:!      call rotpn(rot,'EQUM','J2000',0.d0,'ECLM','J2000',0.d0) 
read_ephem.f90:  call coocha(xea,'CAR',gmse,eqp,'EQU',enne) 
read_ephem.f90:! integers for call to JPl routines                                     
read_ephem.f90:  call dpleph(et,ntarg,ncent,rrd,istate) 
read_ephem.f90:!      call rotpn(rot,'EQUM','J2000',0.d0,'ECLM','J2000',0.d0) 
read_ephem.f90:     CALL filass(unit,filbep) 
read_ephem.f90:     CALL chkpdf(nbep,nbepx,'nbepx') 
read_ephem.f90:     CALL coocha(elem1(1,k),'KEP',gma1(k),xv1,'CAR',enne)              
read_ephem.f90:     CALL coocha(elem2(1,k),'KEP',gma1(k),xv2,'CAR',enne)              
read_ephem.f90:! Dummy call to STATE for reading JPLDE header                          
read_ephem.f90:  CALL state(et2,list,pv,pnut,1) 
read_ephem.f90:     CALL upcase(n1) 
read_ephem.f90:! Dummy call to STATE for reading JPLDE header                          
read_ephem.f90:  CALL state(et2,list,pv,pnut,1) 
read_ephem.f90:! Dummy call to deltt to read the ET-UT data                            
read_ephem.f90:! add dummy call to rdbep to setup the range of values for that too
read_ephem.f90:! integers for call to JPl routines                                     
read_ephem.f90:  call dpleph(et,ntarg,ncent,rrd,istate) 
read_ephem.f90:!      call rotpn(rot,'EQUM','J2000',0.d0,'ECLM','J2000',0.d0) 
read_ephem.f90:! integers for call to JPl routines                                     
read_ephem.f90:  CALL dpleph(et,ntarg,ncent,rrd,istate) 
read_ephem.f90:  CALL dpleph(et,ntarg,ncent,rrd,istate)
reference_systems.f90:   CALL obscoo(obscode,dxbf,name)
reference_systems.f90:      CALL prvec(omega_earth,dxbf,dvbf)
reference_systems.f90:      CALL cnvtim(mjd1,sec1,'ET ',mjd2,sec2,'UT1')
reference_systems.f90:      CALL rotmt(-gast,rot,3)
reference_systems.f90:      CALL rotpn(rot,'EQUT','OFDATE',tdt,'ECLM','J2000',0.d0)
reference_systems.f90:         CALL prodmv(position,roteceq,position)
reference_systems.f90:         CALL prodmv(velocity,roteceq,velocity) 
reference_systems.f90:      CALL rotpv('BF  ',.true.,mjd1,sec1,dxbf,dvbf,'ECLM',.true.,51544,43200.d0,position,velocity)
reference_systems.f90:         CALL prodmv(position,roteceq,position)
reference_systems.f90:         CALL prodmv(velocity,roteceq,velocity)         
reference_systems.f90:     CALL rotpn(rot,'ECLM','J2000',0.d0,'EQUM','J2000',0.d0)
reference_systems.f90:     CALL dpleph(et2,3,11,r6,1)
reference_systems.f90:     CALL pvobs(tdt(i),obscod(i),dxe,dve)
reference_systems.f90:     CALL prodmv(dx,rot,dxe)
reference_systems.f90:  CALL strcnt(rec,cont,rest,error)
reference_systems.f90:  CALL upcase(rsys)
reference_systems.f90:  CALL strcnt(rec,cont,rest,error)
reference_systems.f90:  CALL upcase(epoch)
reference_systems.f90:  CALL chkref(rsys,epoch,error)
reference_systems.f90:  CALL obscoo(idsta,dxbf,name)
reference_systems.f90:  CALL prvec(omega,dxbf,dvbf)
reference_systems.f90:  CALL cnvtim(mjd1,sec1,'ET ',mjd2,sec2,'UT1')
reference_systems.f90:  CALL rotmt(-gast,rot,3)
reference_systems.f90:  CALL rotpn(rot1,'EQUT','OFDATE',t,'ECLM','J2000',0.d0)
reference_systems.f90:  CALL obscoo(idsta,dxbf,name)
reference_systems.f90:  CALL prvec(omega,dxbf,dvbf)
reference_systems.f90:  CALL cnvtim(mjd1,sec1,'ET ',mjd2,sec2,'UT1')
reference_systems.f90:  CALL rotmt(-gast,rot,3)
reference_systems.f90:  CALL rotpn(rot1,'EQUT','OFDATE',t,'ECLM','J2000',0.d0)
reference_systems.f90:  CALL rotpv('BF  ',.true.,mjd1,sec1,pos,vel,                     &
reference_systems.f90:  CALL chkref(rsys1,epoch1,error)
reference_systems.f90:  CALL chkref(rsys2,epoch2,error)
reference_systems.f90:           CALL rotmt(-obl,r,1)
reference_systems.f90:           CALL rnut80(date,r)
reference_systems.f90:           CALL trsp3(r)
reference_systems.f90:           CALL prec(date,r)
reference_systems.f90:           CALL trsp3(r)
reference_systems.f90:           CALL rotmt(-obl,r,1)
reference_systems.f90:           rot=MATMUL(r,rot) ! CALL mult3(r,rot)
reference_systems.f90:           CALL rnut80(t2000,r)
reference_systems.f90:           CALL trsp3(r)
reference_systems.f90:           rot=MATMUL(r,rot) ! CALL mult3(r,rot)
reference_systems.f90:              CALL prec(date2,r)
reference_systems.f90:              rot=MATMUL(r,rot) ! CALL mult3(r,rot)
reference_systems.f90:        CALL rnut80(date,r)
reference_systems.f90:        CALL trsp3(r)
reference_systems.f90:        rot=MATMUL(r,rot) ! CALL mult3(r,rot)
reference_systems.f90:        CALL rotmt(-obl,r,1)
reference_systems.f90:        rot=MATMUL(r,rot) ! CALL mult3(r,rot)
reference_systems.f90:           CALL rnut80(date,r)
reference_systems.f90:           rot=MATMUL(r,rot) ! CALL mult3(r,rot)
reference_systems.f90:           CALL rotmt(obl,r,1)
reference_systems.f90:           rot=MATMUL(r,rot) ! CALL mult3(r,rot)
reference_systems.f90:      call nutn80(tjm,dpsi,deps)
reference_systems.f90:      call rotmt(  epsm , r1 , 1)
reference_systems.f90:      call rotmt( -dpsi , r2 , 3)
reference_systems.f90:      call rotmt( -epst , r3 , 1)
reference_systems.f90:      call rotmt(- zeta , r1 , 3)
reference_systems.f90:      call rotmt( theta , r2 , 2)
reference_systems.f90:      call rotmt(-    z , r3 , 3)
reference_systems.f90:  call nutn80(tjm,dpsi,deps)
station_coordinates.f90:     call filopl(unit,'OBSCODE.dat')
station_coordinates.f90:     call statcode(ocod,k)
station_coordinates.f90:     call filclo(unit,' ')
station_coordinates.f90:        CALL filopl(unit,'OBSCODE_sim.dat')
station_coordinates.f90:        call statcode(ocod,k)
station_coordinates.f90:        CALL filclo(unit,' ')
station_coordinates.f90:     call filopl(unit,'RADCODE.dat')
station_coordinates.f90:5    call filclo(unit,' ')
time_scales.f90:      CALL norstr(c,l) 
time_scales.f90:      CALL strcnt(c,format,rest1,tmperr) 
time_scales.f90:      CALL upcase(format) 
time_scales.f90:          CALL stspli(date,'/',tmp,tmperr) 
time_scales.f90:          CALL stspli(date,'/',tmp,tmperr) 
time_scales.f90:          CALL stspli(hhmmss,':',tmp,tmperr) 
time_scales.f90:          CALL stspli(hhmmss,':',tmp,tmperr) 
time_scales.f90:      CALL strcnt(c,scale,rest1,tmperr) 
time_scales.f90:      CALL chktsc(scale,tmperr) 
time_scales.f90:      CALL timnf(mjd,sec,scale) 
time_scales.f90:      CALL upcase(c) 
time_scales.f90:          CALL rdncha('TAI-UTC.','file',file,.false.,fndfil,fail1,fail) 
time_scales.f90:          CALL rdnlog('TAI-UTC.','pedantic',pedant,.false.,found,       &
time_scales.f90:          CALL rdnint('TAI-UTC.','n_warn',nwmax,.false.,found,          &
time_scales.f90:              CALL filopn(unit,file,'old') 
time_scales.f90:              CALL filopl(unit,file) 
time_scales.f90:          CALL filclo(unit,' ') 
time_scales.f90:      call timnf(mjd2,sec2,eqsc) 
time_scales.f90:    3         call timnf(mjdt,sect,'UT1') 
time_scales.f90:              call timnf(mjd2r,sec2r,'TDT') 
time_scales.f90:    2         call timnf(mjdt,sect,'UTC') 
time_scales.f90:              call timnf(mjd2r,sec2r,'TAI') 
time_scales.f90:          CALL rdncha('ET-UT.','file',file,.false.,fndfil,fail1,fail) 
time_scales.f90:          CALL rdnlog('ET-UT.','pedantic',pedant,.false.,found,         &
time_scales.f90:          CALL rdnint('ET-UT.','n_warn',nwmax,.false.,found,            &
time_scales.f90:              CALL filopn(unit,file,'old') 
time_scales.f90:              CALL filopl(unit,file) 
time_scales.f90:          CALL filclo(unit,' ') 
time_scales.f90:      CALL upcase(chm1) 
time_scales.f90:  call mjddat(tcl,iday,imonth,iyear,hour) 
util_suit.f90:     CALL rmsp(helpfi,ll) 
util_suit.f90:     CALL filopn(iunit,helpfi,'OLD') 
util_suit.f90:     CALL filcat(iunit) 
util_suit.f90:     CALL filclo(iunit,' ') 
util_suit.f90:  CALL rmsp(run1,le1)
util_suit.f90:  CALL filopn(iundone,run1(1:le1)//'.done','unknown')
util_suit.f90:     CALL filclo(iundone,' ')
util_suit.f90:     CALL write_err(name0,iunout,' last asteroid processed, increase ix')
util_suit.f90:     CALL filclo(iundone,'DELETE')
util_suit.f90:     CALL filclo(ierrou,' ') 
util_suit.f90:     CALL filclo(ierrou,'DELETE') 
very_short_arc.f90:     CALL in_ons_rwo(iunobs,iundup,error_model,obsdir,namshort,obs0 &
very_short_arc.f90:     CALL in_ons(iunobs,error_model,namshort,obs0 &
very_short_arc.f90:  CALL obssta(iunlst,v%name,v%name,v%obs(1:m)%time_utc          &
very_short_arc.f90:  CALL attri_comp(v%nobs,v%obs,v%obsw,v%att,error)
very_short_arc.f90:  CALL wri_attri(iunatt,iunrat,v%name,v%att,trou)
very_short_arc.f90:  CALL mpc_obs_input(obs0,obs_ns,m,UNIT=iunobs,EOF=eof,ONS_MODE=.true.)
very_short_arc.f90:   CALL heapsort(obs_ns(1:m)%time_tdt,m,time_ord)
very_short_arc.f90:  CALL observ_rms(obs,error_model,init,obsw,m)
very_short_arc.f90:  CALL mpc_obs_input(obs0,obs_ns,m,UNIT=iunobs,EOF=eof,ONS_MODE=.true.)
very_short_arc.f90:   CALL heapsort(obs_ns(1:m)%time_tdt,m,time_ord)
very_short_arc.f90:  CALL observ_rms(obs,error_model,init,obsw,m)
very_short_arc.f90:  CALL fidinam(obsdir,name0,'rwo',rwofiout,lrwout)
very_short_arc.f90:     CALL base_10_to_64(15581440+dupcou+10000,n_enc)
very_short_arc.f90:     CALL write_rwo(rwofiout(1:lrwout),obs,obsw,m,error_model)
